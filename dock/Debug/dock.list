
dock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b90  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002c50  08002c50  00003c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cec  08002cec  00004014  2**0
                  CONTENTS
  4 .ARM          00000008  08002cec  08002cec  00003cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cf4  08002cf4  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cf4  08002cf4  00003cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002cf8  08002cf8  00003cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08002cfc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000014  08002d10  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08002d10  00004338  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fc4  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014a4  00000000  00000000  0000c000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  0000d4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000051e  00000000  00000000  0000db50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f3c  00000000  00000000  0000e06e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008f4c  00000000  00000000  00021faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c733  00000000  00000000  0002aef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a7629  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016f0  00000000  00000000  000a766c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000a8d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c38 	.word	0x08002c38

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08002c38 	.word	0x08002c38

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	@ (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	469c      	mov	ip, r3
 800027a:	0413      	lsls	r3, r2, #16
 800027c:	4647      	mov	r7, r8
 800027e:	0c1b      	lsrs	r3, r3, #16
 8000280:	001d      	movs	r5, r3
 8000282:	000e      	movs	r6, r1
 8000284:	4661      	mov	r1, ip
 8000286:	0404      	lsls	r4, r0, #16
 8000288:	0c24      	lsrs	r4, r4, #16
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	0c10      	lsrs	r0, r2, #16
 8000290:	434b      	muls	r3, r1
 8000292:	4365      	muls	r5, r4
 8000294:	4341      	muls	r1, r0
 8000296:	4360      	muls	r0, r4
 8000298:	0c2c      	lsrs	r4, r5, #16
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	1824      	adds	r4, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	42a3      	cmp	r3, r4
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	@ 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4356      	muls	r6, r2
 80002b2:	0c23      	lsrs	r3, r4, #16
 80002b4:	042d      	lsls	r5, r5, #16
 80002b6:	0c2d      	lsrs	r5, r5, #16
 80002b8:	1989      	adds	r1, r1, r6
 80002ba:	4463      	add	r3, ip
 80002bc:	0424      	lsls	r4, r4, #16
 80002be:	1960      	adds	r0, r4, r5
 80002c0:	18c9      	adds	r1, r1, r3
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			@ (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	d434      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000302:	469b      	mov	fp, r3
 8000304:	4653      	mov	r3, sl
 8000306:	465a      	mov	r2, fp
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83b      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e079      	b.n	8000412 <__udivmoddi4+0x146>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e076      	b.n	8000418 <__udivmoddi4+0x14c>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e029      	b.n	8000398 <__udivmoddi4+0xcc>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	469b      	mov	fp, r3
 8000370:	2320      	movs	r3, #32
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	4652      	mov	r2, sl
 8000376:	40da      	lsrs	r2, r3
 8000378:	4641      	mov	r1, r8
 800037a:	0013      	movs	r3, r2
 800037c:	464a      	mov	r2, r9
 800037e:	408a      	lsls	r2, r1
 8000380:	0017      	movs	r7, r2
 8000382:	4642      	mov	r2, r8
 8000384:	431f      	orrs	r7, r3
 8000386:	4653      	mov	r3, sl
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d9c3      	bls.n	8000318 <__udivmoddi4+0x4c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4643      	mov	r3, r8
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0d8      	beq.n	8000350 <__udivmoddi4+0x84>
 800039e:	07fb      	lsls	r3, r7, #31
 80003a0:	0872      	lsrs	r2, r6, #1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4646      	mov	r6, r8
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	e00e      	b.n	80003c8 <__udivmoddi4+0xfc>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d101      	bne.n	80003b2 <__udivmoddi4+0xe6>
 80003ae:	42a2      	cmp	r2, r4
 80003b0:	d80c      	bhi.n	80003cc <__udivmoddi4+0x100>
 80003b2:	1aa4      	subs	r4, r4, r2
 80003b4:	419d      	sbcs	r5, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2100      	movs	r1, #0
 80003be:	3e01      	subs	r6, #1
 80003c0:	1824      	adds	r4, r4, r0
 80003c2:	414d      	adcs	r5, r1
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d006      	beq.n	80003d6 <__udivmoddi4+0x10a>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d9ee      	bls.n	80003aa <__udivmoddi4+0xde>
 80003cc:	3e01      	subs	r6, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1f8      	bne.n	80003c8 <__udivmoddi4+0xfc>
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	465b      	mov	r3, fp
 80003dc:	1900      	adds	r0, r0, r4
 80003de:	4169      	adcs	r1, r5
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db24      	blt.n	800042e <__udivmoddi4+0x162>
 80003e4:	002b      	movs	r3, r5
 80003e6:	465a      	mov	r2, fp
 80003e8:	4644      	mov	r4, r8
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	40e2      	lsrs	r2, r4
 80003f0:	001c      	movs	r4, r3
 80003f2:	465b      	mov	r3, fp
 80003f4:	0015      	movs	r5, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db2a      	blt.n	8000450 <__udivmoddi4+0x184>
 80003fa:	0026      	movs	r6, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	0033      	movs	r3, r6
 8000400:	0026      	movs	r6, r4
 8000402:	4647      	mov	r7, r8
 8000404:	40be      	lsls	r6, r7
 8000406:	0032      	movs	r2, r6
 8000408:	1a80      	subs	r0, r0, r2
 800040a:	4199      	sbcs	r1, r3
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	e79e      	b.n	8000350 <__udivmoddi4+0x84>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d8bc      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000416:	e782      	b.n	800031e <__udivmoddi4+0x52>
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	2100      	movs	r1, #0
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	9201      	str	r2, [sp, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	40da      	lsrs	r2, r3
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e785      	b.n	800033a <__udivmoddi4+0x6e>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4646      	mov	r6, r8
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4644      	mov	r4, r8
 8000440:	4313      	orrs	r3, r2
 8000442:	002a      	movs	r2, r5
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	465b      	mov	r3, fp
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	dad4      	bge.n	80003fa <__udivmoddi4+0x12e>
 8000450:	4642      	mov	r2, r8
 8000452:	002f      	movs	r7, r5
 8000454:	2320      	movs	r3, #32
 8000456:	0026      	movs	r6, r4
 8000458:	4097      	lsls	r7, r2
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	40de      	lsrs	r6, r3
 800045e:	003b      	movs	r3, r7
 8000460:	4333      	orrs	r3, r6
 8000462:	e7cd      	b.n	8000400 <__udivmoddi4+0x134>

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	@ (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fa98 	bl	80009f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f88c 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f958 	bl	8000778 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004c8:	f000 f926 	bl	8000718 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004cc:	f000 f8f4 	bl	80006b8 <MX_USART1_UART_Init>

//  at_command("AT+TEST=TXCW\r\n");
//  at_command("AT+TEST=TXCLORA\r\n");
//	  at_command("AT+DR\r\n");
//	  at_command("AT+DR=EU433\r\n");
  	  at_command("AT+CH\r\n");
 80004d0:	4b09      	ldr	r3, [pc, #36]	@ (80004f8 <main+0x40>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 f818 	bl	8000508 <at_command>
//	  at_command("AT+CH=0\r\n");
//	  at_command("AT+CH=1\r\n");
//	  at_command("AT+CH=2\r\n");
//	  at_command("AT+CH=3\r\n");
//	  at_command("AT+CH=3,433.3, DR7\r\n");
  	  at_command("AT+HELP\r\n");
 80004d8:	4b08      	ldr	r3, [pc, #32]	@ (80004fc <main+0x44>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 f814 	bl	8000508 <at_command>
//    at_command("AT+LW=CT, ON\r\n");
  	  at_command("AT+MODE=TEST\r\n");
 80004e0:	4b07      	ldr	r3, [pc, #28]	@ (8000500 <main+0x48>)
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 f810 	bl	8000508 <at_command>
  	  at_command("AT+TEST=?\r\n");
 80004e8:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <main+0x4c>)
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 f80c 	bl	8000508 <at_command>
 80004f0:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */
//	  }
//  }
  /* USER CODE END 3 */
}
 80004f2:	0018      	movs	r0, r3
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	08002c50 	.word	0x08002c50
 80004fc:	08002c58 	.word	0x08002c58
 8000500:	08002c64 	.word	0x08002c64
 8000504:	08002c74 	.word	0x08002c74

08000508 <at_command>:

void at_command(char *command)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	int i;
	uint8_t j=0;
 8000510:	230b      	movs	r3, #11
 8000512:	18fb      	adds	r3, r7, r3
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]

	for (i=0; i< strlen(command); i++)
 8000518:	2300      	movs	r3, #0
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	e00a      	b.n	8000534 <at_command+0x2c>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)&command[i], 1, 100);
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	18d1      	adds	r1, r2, r3
 8000524:	4828      	ldr	r0, [pc, #160]	@ (80005c8 <at_command+0xc0>)
 8000526:	2364      	movs	r3, #100	@ 0x64
 8000528:	2201      	movs	r2, #1
 800052a:	f001 fd0b 	bl	8001f44 <HAL_UART_Transmit>
	for (i=0; i< strlen(command); i++)
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	3301      	adds	r3, #1
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	0018      	movs	r0, r3
 8000538:	f7ff fde6 	bl	8000108 <strlen>
 800053c:	0002      	movs	r2, r0
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	429a      	cmp	r2, r3
 8000542:	d8ec      	bhi.n	800051e <at_command+0x16>
	}

	 while (j < 1)
 8000544:	e033      	b.n	80005ae <at_command+0xa6>
	  {
	    for (i = 0;; i++)
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
	    {
	      HAL_UART_Receive(&huart1, (uint8_t *)&receive1[i], 1, 100);
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	4b1f      	ldr	r3, [pc, #124]	@ (80005cc <at_command+0xc4>)
 800054e:	18d1      	adds	r1, r2, r3
 8000550:	481d      	ldr	r0, [pc, #116]	@ (80005c8 <at_command+0xc0>)
 8000552:	2364      	movs	r3, #100	@ 0x64
 8000554:	2201      	movs	r2, #1
 8000556:	f001 fd95 	bl	8002084 <HAL_UART_Receive>
	      RecBuff1++;
 800055a:	4b1d      	ldr	r3, [pc, #116]	@ (80005d0 <at_command+0xc8>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	1c5a      	adds	r2, r3, #1
 8000560:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <at_command+0xc8>)
 8000562:	601a      	str	r2, [r3, #0]

	      if (receive1[i] == '\0')
 8000564:	4a19      	ldr	r2, [pc, #100]	@ (80005cc <at_command+0xc4>)
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	18d3      	adds	r3, r2, r3
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d11a      	bne.n	80005a6 <at_command+0x9e>
	      {
	        j++;
 8000570:	210b      	movs	r1, #11
 8000572:	187b      	adds	r3, r7, r1
 8000574:	781a      	ldrb	r2, [r3, #0]
 8000576:	187b      	adds	r3, r7, r1
 8000578:	3201      	adds	r2, #1
 800057a:	701a      	strb	r2, [r3, #0]
	        HAL_UART_Transmit(&huart2, (uint8_t *)receive1, i, 100);
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	b29a      	uxth	r2, r3
 8000580:	4912      	ldr	r1, [pc, #72]	@ (80005cc <at_command+0xc4>)
 8000582:	4814      	ldr	r0, [pc, #80]	@ (80005d4 <at_command+0xcc>)
 8000584:	2364      	movs	r3, #100	@ 0x64
 8000586:	f001 fcdd 	bl	8001f44 <HAL_UART_Transmit>
	        HAL_UART_Transmit(&huart2, (uint8_t *)newline, 1, 100);
 800058a:	4913      	ldr	r1, [pc, #76]	@ (80005d8 <at_command+0xd0>)
 800058c:	4811      	ldr	r0, [pc, #68]	@ (80005d4 <at_command+0xcc>)
 800058e:	2364      	movs	r3, #100	@ 0x64
 8000590:	2201      	movs	r2, #1
 8000592:	f001 fcd7 	bl	8001f44 <HAL_UART_Transmit>

	        memset(receive1, 0x00, sizeof(receive1));
 8000596:	23fa      	movs	r3, #250	@ 0xfa
 8000598:	005a      	lsls	r2, r3, #1
 800059a:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <at_command+0xc4>)
 800059c:	2100      	movs	r1, #0
 800059e:	0018      	movs	r0, r3
 80005a0:	f002 fb1e 	bl	8002be0 <memset>
	        break;
 80005a4:	e003      	b.n	80005ae <at_command+0xa6>
	    for (i = 0;; i++)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	3301      	adds	r3, #1
 80005aa:	60fb      	str	r3, [r7, #12]
	      HAL_UART_Receive(&huart1, (uint8_t *)&receive1[i], 1, 100);
 80005ac:	e7cd      	b.n	800054a <at_command+0x42>
	 while (j < 1)
 80005ae:	220b      	movs	r2, #11
 80005b0:	18bb      	adds	r3, r7, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0c6      	beq.n	8000546 <at_command+0x3e>
	      }
	    }
	  }

	  j = 0;
 80005b8:	18bb      	adds	r3, r7, r2
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]

}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b004      	add	sp, #16
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	20000030 	.word	0x20000030
 80005cc:	20000140 	.word	0x20000140
 80005d0:	20000000 	.word	0x20000000
 80005d4:	200000b8 	.word	0x200000b8
 80005d8:	20000004 	.word	0x20000004

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b09f      	sub	sp, #124	@ 0x7c
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	2440      	movs	r4, #64	@ 0x40
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	0018      	movs	r0, r3
 80005e8:	2338      	movs	r3, #56	@ 0x38
 80005ea:	001a      	movs	r2, r3
 80005ec:	2100      	movs	r1, #0
 80005ee:	f002 faf7 	bl	8002be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f2:	232c      	movs	r3, #44	@ 0x2c
 80005f4:	18fb      	adds	r3, r7, r3
 80005f6:	0018      	movs	r0, r3
 80005f8:	2314      	movs	r3, #20
 80005fa:	001a      	movs	r2, r3
 80005fc:	2100      	movs	r1, #0
 80005fe:	f002 faef 	bl	8002be0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	0018      	movs	r0, r3
 8000606:	2328      	movs	r3, #40	@ 0x28
 8000608:	001a      	movs	r2, r3
 800060a:	2100      	movs	r1, #0
 800060c:	f002 fae8 	bl	8002be0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	4b27      	ldr	r3, [pc, #156]	@ (80006b0 <SystemClock_Config+0xd4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a27      	ldr	r2, [pc, #156]	@ (80006b4 <SystemClock_Config+0xd8>)
 8000616:	401a      	ands	r2, r3
 8000618:	4b25      	ldr	r3, [pc, #148]	@ (80006b0 <SystemClock_Config+0xd4>)
 800061a:	2180      	movs	r1, #128	@ 0x80
 800061c:	0109      	lsls	r1, r1, #4
 800061e:	430a      	orrs	r2, r1
 8000620:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000622:	0021      	movs	r1, r4
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2210      	movs	r2, #16
 8000628:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2201      	movs	r2, #1
 800062e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2200      	movs	r2, #0
 8000634:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	22a0      	movs	r2, #160	@ 0xa0
 800063a:	0212      	lsls	r2, r2, #8
 800063c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	187b      	adds	r3, r7, r1
 8000646:	0018      	movs	r0, r3
 8000648:	f000 fc92 	bl	8000f70 <HAL_RCC_OscConfig>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000650:	f000 f8f6 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	212c      	movs	r1, #44	@ 0x2c
 8000656:	187b      	adds	r3, r7, r1
 8000658:	220f      	movs	r2, #15
 800065a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2200      	movs	r2, #0
 8000660:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2100      	movs	r1, #0
 8000678:	0018      	movs	r0, r3
 800067a:	f001 f84d 	bl	8001718 <HAL_RCC_ClockConfig>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000682:	f000 f8dd 	bl	8000840 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2203      	movs	r2, #3
 800068a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	0018      	movs	r0, r3
 800069c:	f001 fa60 	bl	8001b60 <HAL_RCCEx_PeriphCLKConfig>
 80006a0:	1e03      	subs	r3, r0, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006a4:	f000 f8cc 	bl	8000840 <Error_Handler>
  }
}
 80006a8:	46c0      	nop			@ (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	b01f      	add	sp, #124	@ 0x7c
 80006ae:	bd90      	pop	{r4, r7, pc}
 80006b0:	40007000 	.word	0x40007000
 80006b4:	ffffe7ff 	.word	0xffffe7ff

080006b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <MX_USART1_UART_Init+0x58>)
 80006be:	4a15      	ldr	r2, [pc, #84]	@ (8000714 <MX_USART1_UART_Init+0x5c>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006c2:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_USART1_UART_Init+0x58>)
 80006c4:	2296      	movs	r2, #150	@ 0x96
 80006c6:	0192      	lsls	r2, r2, #6
 80006c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_USART1_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_USART1_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_USART1_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_USART1_UART_Init+0x58>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <MX_USART1_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_USART1_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <MX_USART1_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_USART1_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006fa:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <MX_USART1_UART_Init+0x58>)
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 fbcd 	bl	8001e9c <HAL_UART_Init>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000706:	f000 f89b 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000030 	.word	0x20000030
 8000714:	40013800 	.word	0x40013800

08000718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800071c:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <MX_USART2_UART_Init+0x58>)
 800071e:	4a15      	ldr	r2, [pc, #84]	@ (8000774 <MX_USART2_UART_Init+0x5c>)
 8000720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000722:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <MX_USART2_UART_Init+0x58>)
 8000724:	22e1      	movs	r2, #225	@ 0xe1
 8000726:	0252      	lsls	r2, r2, #9
 8000728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_USART2_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_USART2_UART_Init+0x58>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <MX_USART2_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_USART2_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074e:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_USART2_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075a:	4b05      	ldr	r3, [pc, #20]	@ (8000770 <MX_USART2_UART_Init+0x58>)
 800075c:	0018      	movs	r0, r3
 800075e:	f001 fb9d 	bl	8001e9c <HAL_UART_Init>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d001      	beq.n	800076a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000766:	f000 f86b 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200000b8 	.word	0x200000b8
 8000774:	40004400 	.word	0x40004400

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b089      	sub	sp, #36	@ 0x24
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	240c      	movs	r4, #12
 8000780:	193b      	adds	r3, r7, r4
 8000782:	0018      	movs	r0, r3
 8000784:	2314      	movs	r3, #20
 8000786:	001a      	movs	r2, r3
 8000788:	2100      	movs	r1, #0
 800078a:	f002 fa29 	bl	8002be0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	4b2a      	ldr	r3, [pc, #168]	@ (8000838 <MX_GPIO_Init+0xc0>)
 8000790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000792:	4b29      	ldr	r3, [pc, #164]	@ (8000838 <MX_GPIO_Init+0xc0>)
 8000794:	2104      	movs	r1, #4
 8000796:	430a      	orrs	r2, r1
 8000798:	62da      	str	r2, [r3, #44]	@ 0x2c
 800079a:	4b27      	ldr	r3, [pc, #156]	@ (8000838 <MX_GPIO_Init+0xc0>)
 800079c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800079e:	2204      	movs	r2, #4
 80007a0:	4013      	ands	r3, r2
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	4b24      	ldr	r3, [pc, #144]	@ (8000838 <MX_GPIO_Init+0xc0>)
 80007a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007aa:	4b23      	ldr	r3, [pc, #140]	@ (8000838 <MX_GPIO_Init+0xc0>)
 80007ac:	2180      	movs	r1, #128	@ 0x80
 80007ae:	430a      	orrs	r2, r1
 80007b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007b2:	4b21      	ldr	r3, [pc, #132]	@ (8000838 <MX_GPIO_Init+0xc0>)
 80007b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007b6:	2280      	movs	r2, #128	@ 0x80
 80007b8:	4013      	ands	r3, r2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b1e      	ldr	r3, [pc, #120]	@ (8000838 <MX_GPIO_Init+0xc0>)
 80007c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000838 <MX_GPIO_Init+0xc0>)
 80007c4:	2101      	movs	r1, #1
 80007c6:	430a      	orrs	r2, r1
 80007c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <MX_GPIO_Init+0xc0>)
 80007cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ce:	2201      	movs	r2, #1
 80007d0:	4013      	ands	r3, r2
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007d6:	23a0      	movs	r3, #160	@ 0xa0
 80007d8:	05db      	lsls	r3, r3, #23
 80007da:	2200      	movs	r2, #0
 80007dc:	2120      	movs	r1, #32
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 fba8 	bl	8000f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	2280      	movs	r2, #128	@ 0x80
 80007e8:	0192      	lsls	r2, r2, #6
 80007ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	2284      	movs	r2, #132	@ 0x84
 80007f0:	0392      	lsls	r2, r2, #14
 80007f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	4a0f      	ldr	r2, [pc, #60]	@ (800083c <MX_GPIO_Init+0xc4>)
 80007fe:	0019      	movs	r1, r3
 8000800:	0010      	movs	r0, r2
 8000802:	f000 fa19 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000806:	0021      	movs	r1, r4
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2220      	movs	r2, #32
 800080c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2201      	movs	r2, #1
 8000812:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000820:	187a      	adds	r2, r7, r1
 8000822:	23a0      	movs	r3, #160	@ 0xa0
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	0011      	movs	r1, r2
 8000828:	0018      	movs	r0, r3
 800082a:	f000 fa05 	bl	8000c38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b009      	add	sp, #36	@ 0x24
 8000834:	bd90      	pop	{r4, r7, pc}
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	40021000 	.word	0x40021000
 800083c:	50000800 	.word	0x50000800

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	46c0      	nop			@ (mov r8, r8)
 800084a:	e7fd      	b.n	8000848 <Error_Handler+0x8>

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000850:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <HAL_MspInit+0x24>)
 8000852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <HAL_MspInit+0x24>)
 8000856:	2101      	movs	r1, #1
 8000858:	430a      	orrs	r2, r1
 800085a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800085c:	4b04      	ldr	r3, [pc, #16]	@ (8000870 <HAL_MspInit+0x24>)
 800085e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000860:	4b03      	ldr	r3, [pc, #12]	@ (8000870 <HAL_MspInit+0x24>)
 8000862:	2180      	movs	r1, #128	@ 0x80
 8000864:	0549      	lsls	r1, r1, #21
 8000866:	430a      	orrs	r2, r1
 8000868:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40021000 	.word	0x40021000

08000874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b08b      	sub	sp, #44	@ 0x2c
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	2414      	movs	r4, #20
 800087e:	193b      	adds	r3, r7, r4
 8000880:	0018      	movs	r0, r3
 8000882:	2314      	movs	r3, #20
 8000884:	001a      	movs	r2, r3
 8000886:	2100      	movs	r1, #0
 8000888:	f002 f9aa 	bl	8002be0 <memset>
  if(huart->Instance==USART1)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a30      	ldr	r2, [pc, #192]	@ (8000954 <HAL_UART_MspInit+0xe0>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d12b      	bne.n	80008ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000896:	4b30      	ldr	r3, [pc, #192]	@ (8000958 <HAL_UART_MspInit+0xe4>)
 8000898:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800089a:	4b2f      	ldr	r3, [pc, #188]	@ (8000958 <HAL_UART_MspInit+0xe4>)
 800089c:	2180      	movs	r1, #128	@ 0x80
 800089e:	01c9      	lsls	r1, r1, #7
 80008a0:	430a      	orrs	r2, r1
 80008a2:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a4:	4b2c      	ldr	r3, [pc, #176]	@ (8000958 <HAL_UART_MspInit+0xe4>)
 80008a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000958 <HAL_UART_MspInit+0xe4>)
 80008aa:	2101      	movs	r1, #1
 80008ac:	430a      	orrs	r2, r1
 80008ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008b0:	4b29      	ldr	r3, [pc, #164]	@ (8000958 <HAL_UART_MspInit+0xe4>)
 80008b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008b4:	2201      	movs	r2, #1
 80008b6:	4013      	ands	r3, r2
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	22c0      	movs	r2, #192	@ 0xc0
 80008c0:	00d2      	lsls	r2, r2, #3
 80008c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	0021      	movs	r1, r4
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2202      	movs	r2, #2
 80008ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2203      	movs	r2, #3
 80008d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2204      	movs	r2, #4
 80008dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	187a      	adds	r2, r7, r1
 80008e0:	23a0      	movs	r3, #160	@ 0xa0
 80008e2:	05db      	lsls	r3, r3, #23
 80008e4:	0011      	movs	r1, r2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 f9a6 	bl	8000c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ec:	e02e      	b.n	800094c <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a1a      	ldr	r2, [pc, #104]	@ (800095c <HAL_UART_MspInit+0xe8>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d129      	bne.n	800094c <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f8:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <HAL_UART_MspInit+0xe4>)
 80008fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80008fc:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <HAL_UART_MspInit+0xe4>)
 80008fe:	2180      	movs	r1, #128	@ 0x80
 8000900:	0289      	lsls	r1, r1, #10
 8000902:	430a      	orrs	r2, r1
 8000904:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <HAL_UART_MspInit+0xe4>)
 8000908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800090a:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <HAL_UART_MspInit+0xe4>)
 800090c:	2101      	movs	r1, #1
 800090e:	430a      	orrs	r2, r1
 8000910:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000912:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <HAL_UART_MspInit+0xe4>)
 8000914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000916:	2201      	movs	r2, #1
 8000918:	4013      	ands	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800091e:	2114      	movs	r1, #20
 8000920:	187b      	adds	r3, r7, r1
 8000922:	220c      	movs	r2, #12
 8000924:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2202      	movs	r2, #2
 800092a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2203      	movs	r2, #3
 8000936:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2204      	movs	r2, #4
 800093c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	187a      	adds	r2, r7, r1
 8000940:	23a0      	movs	r3, #160	@ 0xa0
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	0011      	movs	r1, r2
 8000946:	0018      	movs	r0, r3
 8000948:	f000 f976 	bl	8000c38 <HAL_GPIO_Init>
}
 800094c:	46c0      	nop			@ (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b00b      	add	sp, #44	@ 0x2c
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	40013800 	.word	0x40013800
 8000958:	40021000 	.word	0x40021000
 800095c:	40004400 	.word	0x40004400

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000964:	46c0      	nop			@ (mov r8, r8)
 8000966:	e7fd      	b.n	8000964 <NMI_Handler+0x4>

08000968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096c:	46c0      	nop			@ (mov r8, r8)
 800096e:	e7fd      	b.n	800096c <HardFault_Handler+0x4>

08000970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000974:	46c0      	nop			@ (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000988:	f000 f886 	bl	8000a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098c:	46c0      	nop			@ (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800099c:	480d      	ldr	r0, [pc, #52]	@ (80009d4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800099e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009a0:	f7ff fff7 	bl	8000992 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a4:	480c      	ldr	r0, [pc, #48]	@ (80009d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009a6:	490d      	ldr	r1, [pc, #52]	@ (80009dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a8:	4a0d      	ldr	r2, [pc, #52]	@ (80009e0 <LoopForever+0xe>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ac:	e002      	b.n	80009b4 <LoopCopyDataInit>

080009ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b2:	3304      	adds	r3, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b8:	d3f9      	bcc.n	80009ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ba:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009bc:	4c0a      	ldr	r4, [pc, #40]	@ (80009e8 <LoopForever+0x16>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c0:	e001      	b.n	80009c6 <LoopFillZerobss>

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c4:	3204      	adds	r2, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80009ca:	f002 f911 	bl	8002bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ce:	f7ff fd73 	bl	80004b8 <main>

080009d2 <LoopForever>:

LoopForever:
    b LoopForever
 80009d2:	e7fe      	b.n	80009d2 <LoopForever>
   ldr   r0, =_estack
 80009d4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80009e0:	08002cfc 	.word	0x08002cfc
  ldr r2, =_sbss
 80009e4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80009e8:	20000338 	.word	0x20000338

080009ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC1_COMP_IRQHandler>
	...

080009f0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009fc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <HAL_Init+0x3c>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <HAL_Init+0x3c>)
 8000a02:	2140      	movs	r1, #64	@ 0x40
 8000a04:	430a      	orrs	r2, r1
 8000a06:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f000 f811 	bl	8000a30 <HAL_InitTick>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d003      	beq.n	8000a1a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	2201      	movs	r2, #1
 8000a16:	701a      	strb	r2, [r3, #0]
 8000a18:	e001      	b.n	8000a1e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a1a:	f7ff ff17 	bl	800084c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
}
 8000a22:	0018      	movs	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b002      	add	sp, #8
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	40022000 	.word	0x40022000

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <HAL_InitTick+0x5c>)
 8000a3a:	681c      	ldr	r4, [r3, #0]
 8000a3c:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <HAL_InitTick+0x60>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	0019      	movs	r1, r3
 8000a42:	23fa      	movs	r3, #250	@ 0xfa
 8000a44:	0098      	lsls	r0, r3, #2
 8000a46:	f7ff fb67 	bl	8000118 <__udivsi3>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	0020      	movs	r0, r4
 8000a50:	f7ff fb62 	bl	8000118 <__udivsi3>
 8000a54:	0003      	movs	r3, r0
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 f8e1 	bl	8000c1e <HAL_SYSTICK_Config>
 8000a5c:	1e03      	subs	r3, r0, #0
 8000a5e:	d001      	beq.n	8000a64 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	e00f      	b.n	8000a84 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	d80b      	bhi.n	8000a82 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	425b      	negs	r3, r3
 8000a70:	2200      	movs	r2, #0
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 f8be 	bl	8000bf4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_InitTick+0x64>)
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e000      	b.n	8000a84 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	0018      	movs	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b003      	add	sp, #12
 8000a8a:	bd90      	pop	{r4, r7, pc}
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	20000010 	.word	0x20000010
 8000a94:	2000000c 	.word	0x2000000c

08000a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <HAL_IncTick+0x1c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <HAL_IncTick+0x20>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	18d2      	adds	r2, r2, r3
 8000aa8:	4b03      	ldr	r3, [pc, #12]	@ (8000ab8 <HAL_IncTick+0x20>)
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	46c0      	nop			@ (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	20000010 	.word	0x20000010
 8000ab8:	20000334 	.word	0x20000334

08000abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b02      	ldr	r3, [pc, #8]	@ (8000acc <HAL_GetTick+0x10>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	20000334 	.word	0x20000334

08000ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	0002      	movs	r2, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ae4:	d828      	bhi.n	8000b38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae6:	4a2f      	ldr	r2, [pc, #188]	@ (8000ba4 <__NVIC_SetPriority+0xd4>)
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b25b      	sxtb	r3, r3
 8000aee:	089b      	lsrs	r3, r3, #2
 8000af0:	33c0      	adds	r3, #192	@ 0xc0
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	589b      	ldr	r3, [r3, r2]
 8000af6:	1dfa      	adds	r2, r7, #7
 8000af8:	7812      	ldrb	r2, [r2, #0]
 8000afa:	0011      	movs	r1, r2
 8000afc:	2203      	movs	r2, #3
 8000afe:	400a      	ands	r2, r1
 8000b00:	00d2      	lsls	r2, r2, #3
 8000b02:	21ff      	movs	r1, #255	@ 0xff
 8000b04:	4091      	lsls	r1, r2
 8000b06:	000a      	movs	r2, r1
 8000b08:	43d2      	mvns	r2, r2
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	019b      	lsls	r3, r3, #6
 8000b12:	22ff      	movs	r2, #255	@ 0xff
 8000b14:	401a      	ands	r2, r3
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	4003      	ands	r3, r0
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b24:	481f      	ldr	r0, [pc, #124]	@ (8000ba4 <__NVIC_SetPriority+0xd4>)
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	089b      	lsrs	r3, r3, #2
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	33c0      	adds	r3, #192	@ 0xc0
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b36:	e031      	b.n	8000b9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba8 <__NVIC_SetPriority+0xd8>)
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	0019      	movs	r1, r3
 8000b40:	230f      	movs	r3, #15
 8000b42:	400b      	ands	r3, r1
 8000b44:	3b08      	subs	r3, #8
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	3306      	adds	r3, #6
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	18d3      	adds	r3, r2, r3
 8000b4e:	3304      	adds	r3, #4
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	1dfa      	adds	r2, r7, #7
 8000b54:	7812      	ldrb	r2, [r2, #0]
 8000b56:	0011      	movs	r1, r2
 8000b58:	2203      	movs	r2, #3
 8000b5a:	400a      	ands	r2, r1
 8000b5c:	00d2      	lsls	r2, r2, #3
 8000b5e:	21ff      	movs	r1, #255	@ 0xff
 8000b60:	4091      	lsls	r1, r2
 8000b62:	000a      	movs	r2, r1
 8000b64:	43d2      	mvns	r2, r2
 8000b66:	401a      	ands	r2, r3
 8000b68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	019b      	lsls	r3, r3, #6
 8000b6e:	22ff      	movs	r2, #255	@ 0xff
 8000b70:	401a      	ands	r2, r3
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	0018      	movs	r0, r3
 8000b78:	2303      	movs	r3, #3
 8000b7a:	4003      	ands	r3, r0
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b80:	4809      	ldr	r0, [pc, #36]	@ (8000ba8 <__NVIC_SetPriority+0xd8>)
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	001c      	movs	r4, r3
 8000b88:	230f      	movs	r3, #15
 8000b8a:	4023      	ands	r3, r4
 8000b8c:	3b08      	subs	r3, #8
 8000b8e:	089b      	lsrs	r3, r3, #2
 8000b90:	430a      	orrs	r2, r1
 8000b92:	3306      	adds	r3, #6
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	18c3      	adds	r3, r0, r3
 8000b98:	3304      	adds	r3, #4
 8000b9a:	601a      	str	r2, [r3, #0]
}
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b003      	add	sp, #12
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	e000e100 	.word	0xe000e100
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	1e5a      	subs	r2, r3, #1
 8000bb8:	2380      	movs	r3, #128	@ 0x80
 8000bba:	045b      	lsls	r3, r3, #17
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d301      	bcc.n	8000bc4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e010      	b.n	8000be6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <SysTick_Config+0x44>)
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	3a01      	subs	r2, #1
 8000bca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bcc:	2301      	movs	r3, #1
 8000bce:	425b      	negs	r3, r3
 8000bd0:	2103      	movs	r1, #3
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f7ff ff7c 	bl	8000ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd8:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <SysTick_Config+0x44>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bde:	4b04      	ldr	r3, [pc, #16]	@ (8000bf0 <SysTick_Config+0x44>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	0018      	movs	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	e000e010 	.word	0xe000e010

08000bf4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	210f      	movs	r1, #15
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	1c02      	adds	r2, r0, #0
 8000c04:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	0011      	movs	r1, r2
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff ff5d 	bl	8000ad0 <__NVIC_SetPriority>
}
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b004      	add	sp, #16
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f7ff ffbf 	bl	8000bac <SysTick_Config>
 8000c2e:	0003      	movs	r3, r0
}
 8000c30:	0018      	movs	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b002      	add	sp, #8
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c4e:	e155      	b.n	8000efc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2101      	movs	r1, #1
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	4091      	lsls	r1, r2
 8000c5a:	000a      	movs	r2, r1
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d100      	bne.n	8000c68 <HAL_GPIO_Init+0x30>
 8000c66:	e146      	b.n	8000ef6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	4013      	ands	r3, r2
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d005      	beq.n	8000c80 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2203      	movs	r2, #3
 8000c7a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d130      	bne.n	8000ce2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	409a      	lsls	r2, r3
 8000c8e:	0013      	movs	r3, r2
 8000c90:	43da      	mvns	r2, r3
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	409a      	lsls	r2, r3
 8000ca2:	0013      	movs	r3, r2
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	0013      	movs	r3, r2
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	091b      	lsrs	r3, r3, #4
 8000ccc:	2201      	movs	r2, #1
 8000cce:	401a      	ands	r2, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	0013      	movs	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	4013      	ands	r3, r2
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	d017      	beq.n	8000d1e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	409a      	lsls	r2, r3
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	0013      	movs	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2203      	movs	r2, #3
 8000d24:	4013      	ands	r3, r2
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d123      	bne.n	8000d72 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	08da      	lsrs	r2, r3, #3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3208      	adds	r2, #8
 8000d32:	0092      	lsls	r2, r2, #2
 8000d34:	58d3      	ldr	r3, [r2, r3]
 8000d36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	2207      	movs	r2, #7
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	43da      	mvns	r2, r3
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	691a      	ldr	r2, [r3, #16]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	2107      	movs	r1, #7
 8000d56:	400b      	ands	r3, r1
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	08da      	lsrs	r2, r3, #3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3208      	adds	r2, #8
 8000d6c:	0092      	lsls	r2, r2, #2
 8000d6e:	6939      	ldr	r1, [r7, #16]
 8000d70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	409a      	lsls	r2, r3
 8000d80:	0013      	movs	r3, r2
 8000d82:	43da      	mvns	r2, r3
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2203      	movs	r2, #3
 8000d90:	401a      	ands	r2, r3
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	409a      	lsls	r2, r3
 8000d98:	0013      	movs	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	23c0      	movs	r3, #192	@ 0xc0
 8000dac:	029b      	lsls	r3, r3, #10
 8000dae:	4013      	ands	r3, r2
 8000db0:	d100      	bne.n	8000db4 <HAL_GPIO_Init+0x17c>
 8000db2:	e0a0      	b.n	8000ef6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db4:	4b57      	ldr	r3, [pc, #348]	@ (8000f14 <HAL_GPIO_Init+0x2dc>)
 8000db6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000db8:	4b56      	ldr	r3, [pc, #344]	@ (8000f14 <HAL_GPIO_Init+0x2dc>)
 8000dba:	2101      	movs	r1, #1
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dc0:	4a55      	ldr	r2, [pc, #340]	@ (8000f18 <HAL_GPIO_Init+0x2e0>)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	589b      	ldr	r3, [r3, r2]
 8000dcc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	220f      	movs	r2, #15
 8000dd8:	409a      	lsls	r2, r3
 8000dda:	0013      	movs	r3, r2
 8000ddc:	43da      	mvns	r2, r3
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	23a0      	movs	r3, #160	@ 0xa0
 8000de8:	05db      	lsls	r3, r3, #23
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d01f      	beq.n	8000e2e <HAL_GPIO_Init+0x1f6>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a4a      	ldr	r2, [pc, #296]	@ (8000f1c <HAL_GPIO_Init+0x2e4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d019      	beq.n	8000e2a <HAL_GPIO_Init+0x1f2>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a49      	ldr	r2, [pc, #292]	@ (8000f20 <HAL_GPIO_Init+0x2e8>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d013      	beq.n	8000e26 <HAL_GPIO_Init+0x1ee>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a48      	ldr	r2, [pc, #288]	@ (8000f24 <HAL_GPIO_Init+0x2ec>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00d      	beq.n	8000e22 <HAL_GPIO_Init+0x1ea>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a47      	ldr	r2, [pc, #284]	@ (8000f28 <HAL_GPIO_Init+0x2f0>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d007      	beq.n	8000e1e <HAL_GPIO_Init+0x1e6>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a46      	ldr	r2, [pc, #280]	@ (8000f2c <HAL_GPIO_Init+0x2f4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d101      	bne.n	8000e1a <HAL_GPIO_Init+0x1e2>
 8000e16:	2305      	movs	r3, #5
 8000e18:	e00a      	b.n	8000e30 <HAL_GPIO_Init+0x1f8>
 8000e1a:	2306      	movs	r3, #6
 8000e1c:	e008      	b.n	8000e30 <HAL_GPIO_Init+0x1f8>
 8000e1e:	2304      	movs	r3, #4
 8000e20:	e006      	b.n	8000e30 <HAL_GPIO_Init+0x1f8>
 8000e22:	2303      	movs	r3, #3
 8000e24:	e004      	b.n	8000e30 <HAL_GPIO_Init+0x1f8>
 8000e26:	2302      	movs	r3, #2
 8000e28:	e002      	b.n	8000e30 <HAL_GPIO_Init+0x1f8>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e000      	b.n	8000e30 <HAL_GPIO_Init+0x1f8>
 8000e2e:	2300      	movs	r3, #0
 8000e30:	697a      	ldr	r2, [r7, #20]
 8000e32:	2103      	movs	r1, #3
 8000e34:	400a      	ands	r2, r1
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	4093      	lsls	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e40:	4935      	ldr	r1, [pc, #212]	@ (8000f18 <HAL_GPIO_Init+0x2e0>)
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	089b      	lsrs	r3, r3, #2
 8000e46:	3302      	adds	r3, #2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4e:	4b38      	ldr	r3, [pc, #224]	@ (8000f30 <HAL_GPIO_Init+0x2f8>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	43da      	mvns	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	2380      	movs	r3, #128	@ 0x80
 8000e64:	035b      	lsls	r3, r3, #13
 8000e66:	4013      	ands	r3, r2
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e72:	4b2f      	ldr	r3, [pc, #188]	@ (8000f30 <HAL_GPIO_Init+0x2f8>)
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e78:	4b2d      	ldr	r3, [pc, #180]	@ (8000f30 <HAL_GPIO_Init+0x2f8>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	43da      	mvns	r2, r3
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	2380      	movs	r3, #128	@ 0x80
 8000e8e:	039b      	lsls	r3, r3, #14
 8000e90:	4013      	ands	r3, r2
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e9c:	4b24      	ldr	r3, [pc, #144]	@ (8000f30 <HAL_GPIO_Init+0x2f8>)
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000ea2:	4b23      	ldr	r3, [pc, #140]	@ (8000f30 <HAL_GPIO_Init+0x2f8>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	2380      	movs	r3, #128	@ 0x80
 8000eb8:	029b      	lsls	r3, r3, #10
 8000eba:	4013      	ands	r3, r2
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f30 <HAL_GPIO_Init+0x2f8>)
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	@ (8000f30 <HAL_GPIO_Init+0x2f8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	43da      	mvns	r2, r3
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	2380      	movs	r3, #128	@ 0x80
 8000ee2:	025b      	lsls	r3, r3, #9
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <HAL_GPIO_Init+0x2f8>)
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	40da      	lsrs	r2, r3
 8000f04:	1e13      	subs	r3, r2, #0
 8000f06:	d000      	beq.n	8000f0a <HAL_GPIO_Init+0x2d2>
 8000f08:	e6a2      	b.n	8000c50 <HAL_GPIO_Init+0x18>
  }
}
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	46c0      	nop			@ (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b006      	add	sp, #24
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40010000 	.word	0x40010000
 8000f1c:	50000400 	.word	0x50000400
 8000f20:	50000800 	.word	0x50000800
 8000f24:	50000c00 	.word	0x50000c00
 8000f28:	50001000 	.word	0x50001000
 8000f2c:	50001c00 	.word	0x50001c00
 8000f30:	40010400 	.word	0x40010400

08000f34 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	0008      	movs	r0, r1
 8000f3e:	0011      	movs	r1, r2
 8000f40:	1cbb      	adds	r3, r7, #2
 8000f42:	1c02      	adds	r2, r0, #0
 8000f44:	801a      	strh	r2, [r3, #0]
 8000f46:	1c7b      	adds	r3, r7, #1
 8000f48:	1c0a      	adds	r2, r1, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f4c:	1c7b      	adds	r3, r7, #1
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d004      	beq.n	8000f5e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f54:	1cbb      	adds	r3, r7, #2
 8000f56:	881a      	ldrh	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000f5c:	e003      	b.n	8000f66 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000f5e:	1cbb      	adds	r3, r7, #2
 8000f60:	881a      	ldrh	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b002      	add	sp, #8
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b08a      	sub	sp, #40	@ 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d102      	bne.n	8000f84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	f000 fbbf 	bl	8001702 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f84:	4bc9      	ldr	r3, [pc, #804]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	220c      	movs	r2, #12
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f8e:	4bc7      	ldr	r3, [pc, #796]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	2380      	movs	r3, #128	@ 0x80
 8000f94:	025b      	lsls	r3, r3, #9
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d100      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x36>
 8000fa4:	e07e      	b.n	80010a4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	2b08      	cmp	r3, #8
 8000faa:	d007      	beq.n	8000fbc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	2b0c      	cmp	r3, #12
 8000fb0:	d112      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x68>
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	2380      	movs	r3, #128	@ 0x80
 8000fb6:	025b      	lsls	r3, r3, #9
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d10d      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fbc:	4bbb      	ldr	r3, [pc, #748]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	2380      	movs	r3, #128	@ 0x80
 8000fc2:	029b      	lsls	r3, r3, #10
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d100      	bne.n	8000fca <HAL_RCC_OscConfig+0x5a>
 8000fc8:	e06b      	b.n	80010a2 <HAL_RCC_OscConfig+0x132>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d167      	bne.n	80010a2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	f000 fb95 	bl	8001702 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685a      	ldr	r2, [r3, #4]
 8000fdc:	2380      	movs	r3, #128	@ 0x80
 8000fde:	025b      	lsls	r3, r3, #9
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d107      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x84>
 8000fe4:	4bb1      	ldr	r3, [pc, #708]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4bb0      	ldr	r3, [pc, #704]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8000fea:	2180      	movs	r1, #128	@ 0x80
 8000fec:	0249      	lsls	r1, r1, #9
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	e027      	b.n	8001044 <HAL_RCC_OscConfig+0xd4>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	23a0      	movs	r3, #160	@ 0xa0
 8000ffa:	02db      	lsls	r3, r3, #11
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d10e      	bne.n	800101e <HAL_RCC_OscConfig+0xae>
 8001000:	4baa      	ldr	r3, [pc, #680]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4ba9      	ldr	r3, [pc, #676]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001006:	2180      	movs	r1, #128	@ 0x80
 8001008:	02c9      	lsls	r1, r1, #11
 800100a:	430a      	orrs	r2, r1
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	4ba7      	ldr	r3, [pc, #668]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4ba6      	ldr	r3, [pc, #664]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001014:	2180      	movs	r1, #128	@ 0x80
 8001016:	0249      	lsls	r1, r1, #9
 8001018:	430a      	orrs	r2, r1
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	e012      	b.n	8001044 <HAL_RCC_OscConfig+0xd4>
 800101e:	4ba3      	ldr	r3, [pc, #652]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	4ba2      	ldr	r3, [pc, #648]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001024:	49a2      	ldr	r1, [pc, #648]	@ (80012b0 <HAL_RCC_OscConfig+0x340>)
 8001026:	400a      	ands	r2, r1
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	4ba0      	ldr	r3, [pc, #640]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	2380      	movs	r3, #128	@ 0x80
 8001030:	025b      	lsls	r3, r3, #9
 8001032:	4013      	ands	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4b9c      	ldr	r3, [pc, #624]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b9b      	ldr	r3, [pc, #620]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 800103e:	499d      	ldr	r1, [pc, #628]	@ (80012b4 <HAL_RCC_OscConfig+0x344>)
 8001040:	400a      	ands	r2, r1
 8001042:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d015      	beq.n	8001078 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fd36 	bl	8000abc <HAL_GetTick>
 8001050:	0003      	movs	r3, r0
 8001052:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001054:	e009      	b.n	800106a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001056:	f7ff fd31 	bl	8000abc <HAL_GetTick>
 800105a:	0002      	movs	r2, r0
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	2b64      	cmp	r3, #100	@ 0x64
 8001062:	d902      	bls.n	800106a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	f000 fb4c 	bl	8001702 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800106a:	4b90      	ldr	r3, [pc, #576]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	2380      	movs	r3, #128	@ 0x80
 8001070:	029b      	lsls	r3, r3, #10
 8001072:	4013      	ands	r3, r2
 8001074:	d0ef      	beq.n	8001056 <HAL_RCC_OscConfig+0xe6>
 8001076:	e015      	b.n	80010a4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff fd20 	bl	8000abc <HAL_GetTick>
 800107c:	0003      	movs	r3, r0
 800107e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001080:	e008      	b.n	8001094 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001082:	f7ff fd1b 	bl	8000abc <HAL_GetTick>
 8001086:	0002      	movs	r2, r0
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b64      	cmp	r3, #100	@ 0x64
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e336      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001094:	4b85      	ldr	r3, [pc, #532]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	2380      	movs	r3, #128	@ 0x80
 800109a:	029b      	lsls	r3, r3, #10
 800109c:	4013      	ands	r3, r2
 800109e:	d1f0      	bne.n	8001082 <HAL_RCC_OscConfig+0x112>
 80010a0:	e000      	b.n	80010a4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2202      	movs	r2, #2
 80010aa:	4013      	ands	r3, r2
 80010ac:	d100      	bne.n	80010b0 <HAL_RCC_OscConfig+0x140>
 80010ae:	e099      	b.n	80011e4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80010b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b8:	2220      	movs	r2, #32
 80010ba:	4013      	ands	r3, r2
 80010bc:	d009      	beq.n	80010d2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80010be:	4b7b      	ldr	r3, [pc, #492]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b7a      	ldr	r3, [pc, #488]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 80010c4:	2120      	movs	r1, #32
 80010c6:	430a      	orrs	r2, r1
 80010c8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80010ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010cc:	2220      	movs	r2, #32
 80010ce:	4393      	bics	r3, r2
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	d005      	beq.n	80010e4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	2b0c      	cmp	r3, #12
 80010dc:	d13e      	bne.n	800115c <HAL_RCC_OscConfig+0x1ec>
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d13b      	bne.n	800115c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80010e4:	4b71      	ldr	r3, [pc, #452]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2204      	movs	r2, #4
 80010ea:	4013      	ands	r3, r2
 80010ec:	d004      	beq.n	80010f8 <HAL_RCC_OscConfig+0x188>
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e304      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f8:	4b6c      	ldr	r3, [pc, #432]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	4a6e      	ldr	r2, [pc, #440]	@ (80012b8 <HAL_RCC_OscConfig+0x348>)
 80010fe:	4013      	ands	r3, r2
 8001100:	0019      	movs	r1, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	021a      	lsls	r2, r3, #8
 8001108:	4b68      	ldr	r3, [pc, #416]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 800110a:	430a      	orrs	r2, r1
 800110c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800110e:	4b67      	ldr	r3, [pc, #412]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2209      	movs	r2, #9
 8001114:	4393      	bics	r3, r2
 8001116:	0019      	movs	r1, r3
 8001118:	4b64      	ldr	r3, [pc, #400]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 800111a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800111c:	430a      	orrs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001120:	f000 fc42 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 8001124:	0001      	movs	r1, r0
 8001126:	4b61      	ldr	r3, [pc, #388]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	220f      	movs	r2, #15
 800112e:	4013      	ands	r3, r2
 8001130:	4a62      	ldr	r2, [pc, #392]	@ (80012bc <HAL_RCC_OscConfig+0x34c>)
 8001132:	5cd3      	ldrb	r3, [r2, r3]
 8001134:	000a      	movs	r2, r1
 8001136:	40da      	lsrs	r2, r3
 8001138:	4b61      	ldr	r3, [pc, #388]	@ (80012c0 <HAL_RCC_OscConfig+0x350>)
 800113a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800113c:	4b61      	ldr	r3, [pc, #388]	@ (80012c4 <HAL_RCC_OscConfig+0x354>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2513      	movs	r5, #19
 8001142:	197c      	adds	r4, r7, r5
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff fc73 	bl	8000a30 <HAL_InitTick>
 800114a:	0003      	movs	r3, r0
 800114c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800114e:	197b      	adds	r3, r7, r5
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d046      	beq.n	80011e4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001156:	197b      	adds	r3, r7, r5
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	e2d2      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800115c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115e:	2b00      	cmp	r3, #0
 8001160:	d027      	beq.n	80011b2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001162:	4b52      	ldr	r3, [pc, #328]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2209      	movs	r2, #9
 8001168:	4393      	bics	r3, r2
 800116a:	0019      	movs	r1, r3
 800116c:	4b4f      	ldr	r3, [pc, #316]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 800116e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001170:	430a      	orrs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff fca2 	bl	8000abc <HAL_GetTick>
 8001178:	0003      	movs	r3, r0
 800117a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800117c:	e008      	b.n	8001190 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800117e:	f7ff fc9d 	bl	8000abc <HAL_GetTick>
 8001182:	0002      	movs	r2, r0
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e2b8      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001190:	4b46      	ldr	r3, [pc, #280]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2204      	movs	r2, #4
 8001196:	4013      	ands	r3, r2
 8001198:	d0f1      	beq.n	800117e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119a:	4b44      	ldr	r3, [pc, #272]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	4a46      	ldr	r2, [pc, #280]	@ (80012b8 <HAL_RCC_OscConfig+0x348>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	0019      	movs	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	021a      	lsls	r2, r3, #8
 80011aa:	4b40      	ldr	r3, [pc, #256]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 80011ac:	430a      	orrs	r2, r1
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	e018      	b.n	80011e4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b2:	4b3e      	ldr	r3, [pc, #248]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b3d      	ldr	r3, [pc, #244]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 80011b8:	2101      	movs	r1, #1
 80011ba:	438a      	bics	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff fc7d 	bl	8000abc <HAL_GetTick>
 80011c2:	0003      	movs	r3, r0
 80011c4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c8:	f7ff fc78 	bl	8000abc <HAL_GetTick>
 80011cc:	0002      	movs	r2, r0
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e293      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011da:	4b34      	ldr	r3, [pc, #208]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2204      	movs	r2, #4
 80011e0:	4013      	ands	r3, r2
 80011e2:	d1f1      	bne.n	80011c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2210      	movs	r2, #16
 80011ea:	4013      	ands	r3, r2
 80011ec:	d100      	bne.n	80011f0 <HAL_RCC_OscConfig+0x280>
 80011ee:	e0a2      	b.n	8001336 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d140      	bne.n	8001278 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011f6:	4b2d      	ldr	r3, [pc, #180]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	2380      	movs	r3, #128	@ 0x80
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4013      	ands	r3, r2
 8001200:	d005      	beq.n	800120e <HAL_RCC_OscConfig+0x29e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e279      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800120e:	4b27      	ldr	r3, [pc, #156]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	4a2d      	ldr	r2, [pc, #180]	@ (80012c8 <HAL_RCC_OscConfig+0x358>)
 8001214:	4013      	ands	r3, r2
 8001216:	0019      	movs	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800121c:	4b23      	ldr	r3, [pc, #140]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 800121e:	430a      	orrs	r2, r1
 8001220:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001222:	4b22      	ldr	r3, [pc, #136]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	0a19      	lsrs	r1, r3, #8
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	061a      	lsls	r2, r3, #24
 8001230:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001232:	430a      	orrs	r2, r1
 8001234:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123a:	0b5b      	lsrs	r3, r3, #13
 800123c:	3301      	adds	r3, #1
 800123e:	2280      	movs	r2, #128	@ 0x80
 8001240:	0212      	lsls	r2, r2, #8
 8001242:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001244:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	091b      	lsrs	r3, r3, #4
 800124a:	210f      	movs	r1, #15
 800124c:	400b      	ands	r3, r1
 800124e:	491b      	ldr	r1, [pc, #108]	@ (80012bc <HAL_RCC_OscConfig+0x34c>)
 8001250:	5ccb      	ldrb	r3, [r1, r3]
 8001252:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001254:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <HAL_RCC_OscConfig+0x350>)
 8001256:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001258:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <HAL_RCC_OscConfig+0x354>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2513      	movs	r5, #19
 800125e:	197c      	adds	r4, r7, r5
 8001260:	0018      	movs	r0, r3
 8001262:	f7ff fbe5 	bl	8000a30 <HAL_InitTick>
 8001266:	0003      	movs	r3, r0
 8001268:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800126a:	197b      	adds	r3, r7, r5
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d061      	beq.n	8001336 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001272:	197b      	adds	r3, r7, r5
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	e244      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d040      	beq.n	8001302 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001280:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001286:	2180      	movs	r1, #128	@ 0x80
 8001288:	0049      	lsls	r1, r1, #1
 800128a:	430a      	orrs	r2, r1
 800128c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128e:	f7ff fc15 	bl	8000abc <HAL_GetTick>
 8001292:	0003      	movs	r3, r0
 8001294:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001296:	e019      	b.n	80012cc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001298:	f7ff fc10 	bl	8000abc <HAL_GetTick>
 800129c:	0002      	movs	r2, r0
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d912      	bls.n	80012cc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e22b      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	40021000 	.word	0x40021000
 80012b0:	fffeffff 	.word	0xfffeffff
 80012b4:	fffbffff 	.word	0xfffbffff
 80012b8:	ffffe0ff 	.word	0xffffe0ff
 80012bc:	08002c80 	.word	0x08002c80
 80012c0:	20000008 	.word	0x20000008
 80012c4:	2000000c 	.word	0x2000000c
 80012c8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012cc:	4bca      	ldr	r3, [pc, #808]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	2380      	movs	r3, #128	@ 0x80
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4013      	ands	r3, r2
 80012d6:	d0df      	beq.n	8001298 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d8:	4bc7      	ldr	r3, [pc, #796]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	4ac7      	ldr	r2, [pc, #796]	@ (80015fc <HAL_RCC_OscConfig+0x68c>)
 80012de:	4013      	ands	r3, r2
 80012e0:	0019      	movs	r1, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012e6:	4bc4      	ldr	r3, [pc, #784]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 80012e8:	430a      	orrs	r2, r1
 80012ea:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ec:	4bc2      	ldr	r3, [pc, #776]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	0a19      	lsrs	r1, r3, #8
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	061a      	lsls	r2, r3, #24
 80012fa:	4bbf      	ldr	r3, [pc, #764]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 80012fc:	430a      	orrs	r2, r1
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	e019      	b.n	8001336 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001302:	4bbd      	ldr	r3, [pc, #756]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4bbc      	ldr	r3, [pc, #752]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 8001308:	49bd      	ldr	r1, [pc, #756]	@ (8001600 <HAL_RCC_OscConfig+0x690>)
 800130a:	400a      	ands	r2, r1
 800130c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130e:	f7ff fbd5 	bl	8000abc <HAL_GetTick>
 8001312:	0003      	movs	r3, r0
 8001314:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001318:	f7ff fbd0 	bl	8000abc <HAL_GetTick>
 800131c:	0002      	movs	r2, r0
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e1eb      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800132a:	4bb3      	ldr	r3, [pc, #716]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	2380      	movs	r3, #128	@ 0x80
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4013      	ands	r3, r2
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2208      	movs	r2, #8
 800133c:	4013      	ands	r3, r2
 800133e:	d036      	beq.n	80013ae <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d019      	beq.n	800137c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001348:	4bab      	ldr	r3, [pc, #684]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 800134a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800134c:	4baa      	ldr	r3, [pc, #680]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 800134e:	2101      	movs	r1, #1
 8001350:	430a      	orrs	r2, r1
 8001352:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001354:	f7ff fbb2 	bl	8000abc <HAL_GetTick>
 8001358:	0003      	movs	r3, r0
 800135a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800135e:	f7ff fbad 	bl	8000abc <HAL_GetTick>
 8001362:	0002      	movs	r2, r0
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e1c8      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001370:	4ba1      	ldr	r3, [pc, #644]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 8001372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001374:	2202      	movs	r2, #2
 8001376:	4013      	ands	r3, r2
 8001378:	d0f1      	beq.n	800135e <HAL_RCC_OscConfig+0x3ee>
 800137a:	e018      	b.n	80013ae <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800137c:	4b9e      	ldr	r3, [pc, #632]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 800137e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001380:	4b9d      	ldr	r3, [pc, #628]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 8001382:	2101      	movs	r1, #1
 8001384:	438a      	bics	r2, r1
 8001386:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001388:	f7ff fb98 	bl	8000abc <HAL_GetTick>
 800138c:	0003      	movs	r3, r0
 800138e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001392:	f7ff fb93 	bl	8000abc <HAL_GetTick>
 8001396:	0002      	movs	r2, r0
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e1ae      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013a4:	4b94      	ldr	r3, [pc, #592]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 80013a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013a8:	2202      	movs	r2, #2
 80013aa:	4013      	ands	r3, r2
 80013ac:	d1f1      	bne.n	8001392 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2204      	movs	r2, #4
 80013b4:	4013      	ands	r3, r2
 80013b6:	d100      	bne.n	80013ba <HAL_RCC_OscConfig+0x44a>
 80013b8:	e0ae      	b.n	8001518 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ba:	2023      	movs	r0, #35	@ 0x23
 80013bc:	183b      	adds	r3, r7, r0
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c2:	4b8d      	ldr	r3, [pc, #564]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 80013c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013c6:	2380      	movs	r3, #128	@ 0x80
 80013c8:	055b      	lsls	r3, r3, #21
 80013ca:	4013      	ands	r3, r2
 80013cc:	d109      	bne.n	80013e2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b8a      	ldr	r3, [pc, #552]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 80013d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013d2:	4b89      	ldr	r3, [pc, #548]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 80013d4:	2180      	movs	r1, #128	@ 0x80
 80013d6:	0549      	lsls	r1, r1, #21
 80013d8:	430a      	orrs	r2, r1
 80013da:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80013dc:	183b      	adds	r3, r7, r0
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e2:	4b88      	ldr	r3, [pc, #544]	@ (8001604 <HAL_RCC_OscConfig+0x694>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	2380      	movs	r3, #128	@ 0x80
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4013      	ands	r3, r2
 80013ec:	d11a      	bne.n	8001424 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ee:	4b85      	ldr	r3, [pc, #532]	@ (8001604 <HAL_RCC_OscConfig+0x694>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b84      	ldr	r3, [pc, #528]	@ (8001604 <HAL_RCC_OscConfig+0x694>)
 80013f4:	2180      	movs	r1, #128	@ 0x80
 80013f6:	0049      	lsls	r1, r1, #1
 80013f8:	430a      	orrs	r2, r1
 80013fa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fc:	f7ff fb5e 	bl	8000abc <HAL_GetTick>
 8001400:	0003      	movs	r3, r0
 8001402:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001406:	f7ff fb59 	bl	8000abc <HAL_GetTick>
 800140a:	0002      	movs	r2, r0
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b64      	cmp	r3, #100	@ 0x64
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e174      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	4b7a      	ldr	r3, [pc, #488]	@ (8001604 <HAL_RCC_OscConfig+0x694>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	2380      	movs	r3, #128	@ 0x80
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4013      	ands	r3, r2
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	2380      	movs	r3, #128	@ 0x80
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	429a      	cmp	r2, r3
 800142e:	d107      	bne.n	8001440 <HAL_RCC_OscConfig+0x4d0>
 8001430:	4b71      	ldr	r3, [pc, #452]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 8001432:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001434:	4b70      	ldr	r3, [pc, #448]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 8001436:	2180      	movs	r1, #128	@ 0x80
 8001438:	0049      	lsls	r1, r1, #1
 800143a:	430a      	orrs	r2, r1
 800143c:	651a      	str	r2, [r3, #80]	@ 0x50
 800143e:	e031      	b.n	80014a4 <HAL_RCC_OscConfig+0x534>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10c      	bne.n	8001462 <HAL_RCC_OscConfig+0x4f2>
 8001448:	4b6b      	ldr	r3, [pc, #428]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 800144a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800144c:	4b6a      	ldr	r3, [pc, #424]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 800144e:	496c      	ldr	r1, [pc, #432]	@ (8001600 <HAL_RCC_OscConfig+0x690>)
 8001450:	400a      	ands	r2, r1
 8001452:	651a      	str	r2, [r3, #80]	@ 0x50
 8001454:	4b68      	ldr	r3, [pc, #416]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 8001456:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001458:	4b67      	ldr	r3, [pc, #412]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 800145a:	496b      	ldr	r1, [pc, #428]	@ (8001608 <HAL_RCC_OscConfig+0x698>)
 800145c:	400a      	ands	r2, r1
 800145e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001460:	e020      	b.n	80014a4 <HAL_RCC_OscConfig+0x534>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	23a0      	movs	r3, #160	@ 0xa0
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	429a      	cmp	r2, r3
 800146c:	d10e      	bne.n	800148c <HAL_RCC_OscConfig+0x51c>
 800146e:	4b62      	ldr	r3, [pc, #392]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 8001470:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001472:	4b61      	ldr	r3, [pc, #388]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 8001474:	2180      	movs	r1, #128	@ 0x80
 8001476:	00c9      	lsls	r1, r1, #3
 8001478:	430a      	orrs	r2, r1
 800147a:	651a      	str	r2, [r3, #80]	@ 0x50
 800147c:	4b5e      	ldr	r3, [pc, #376]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 800147e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001480:	4b5d      	ldr	r3, [pc, #372]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 8001482:	2180      	movs	r1, #128	@ 0x80
 8001484:	0049      	lsls	r1, r1, #1
 8001486:	430a      	orrs	r2, r1
 8001488:	651a      	str	r2, [r3, #80]	@ 0x50
 800148a:	e00b      	b.n	80014a4 <HAL_RCC_OscConfig+0x534>
 800148c:	4b5a      	ldr	r3, [pc, #360]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 800148e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001490:	4b59      	ldr	r3, [pc, #356]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 8001492:	495b      	ldr	r1, [pc, #364]	@ (8001600 <HAL_RCC_OscConfig+0x690>)
 8001494:	400a      	ands	r2, r1
 8001496:	651a      	str	r2, [r3, #80]	@ 0x50
 8001498:	4b57      	ldr	r3, [pc, #348]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 800149a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800149c:	4b56      	ldr	r3, [pc, #344]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 800149e:	495a      	ldr	r1, [pc, #360]	@ (8001608 <HAL_RCC_OscConfig+0x698>)
 80014a0:	400a      	ands	r2, r1
 80014a2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d015      	beq.n	80014d8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ac:	f7ff fb06 	bl	8000abc <HAL_GetTick>
 80014b0:	0003      	movs	r3, r0
 80014b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014b4:	e009      	b.n	80014ca <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b6:	f7ff fb01 	bl	8000abc <HAL_GetTick>
 80014ba:	0002      	movs	r2, r0
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	4a52      	ldr	r2, [pc, #328]	@ (800160c <HAL_RCC_OscConfig+0x69c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e11b      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014ca:	4b4b      	ldr	r3, [pc, #300]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 80014cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014ce:	2380      	movs	r3, #128	@ 0x80
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4013      	ands	r3, r2
 80014d4:	d0ef      	beq.n	80014b6 <HAL_RCC_OscConfig+0x546>
 80014d6:	e014      	b.n	8001502 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d8:	f7ff faf0 	bl	8000abc <HAL_GetTick>
 80014dc:	0003      	movs	r3, r0
 80014de:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014e0:	e009      	b.n	80014f6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e2:	f7ff faeb 	bl	8000abc <HAL_GetTick>
 80014e6:	0002      	movs	r2, r0
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	4a47      	ldr	r2, [pc, #284]	@ (800160c <HAL_RCC_OscConfig+0x69c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e105      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014f6:	4b40      	ldr	r3, [pc, #256]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 80014f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014fa:	2380      	movs	r3, #128	@ 0x80
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4013      	ands	r3, r2
 8001500:	d1ef      	bne.n	80014e2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001502:	2323      	movs	r3, #35	@ 0x23
 8001504:	18fb      	adds	r3, r7, r3
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d105      	bne.n	8001518 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800150c:	4b3a      	ldr	r3, [pc, #232]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 800150e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001510:	4b39      	ldr	r3, [pc, #228]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 8001512:	493f      	ldr	r1, [pc, #252]	@ (8001610 <HAL_RCC_OscConfig+0x6a0>)
 8001514:	400a      	ands	r2, r1
 8001516:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2220      	movs	r2, #32
 800151e:	4013      	ands	r3, r2
 8001520:	d049      	beq.n	80015b6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d026      	beq.n	8001578 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800152a:	4b33      	ldr	r3, [pc, #204]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	4b32      	ldr	r3, [pc, #200]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 8001530:	2101      	movs	r1, #1
 8001532:	430a      	orrs	r2, r1
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	4b30      	ldr	r3, [pc, #192]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 8001538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800153a:	4b2f      	ldr	r3, [pc, #188]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 800153c:	2101      	movs	r1, #1
 800153e:	430a      	orrs	r2, r1
 8001540:	635a      	str	r2, [r3, #52]	@ 0x34
 8001542:	4b34      	ldr	r3, [pc, #208]	@ (8001614 <HAL_RCC_OscConfig+0x6a4>)
 8001544:	6a1a      	ldr	r2, [r3, #32]
 8001546:	4b33      	ldr	r3, [pc, #204]	@ (8001614 <HAL_RCC_OscConfig+0x6a4>)
 8001548:	2180      	movs	r1, #128	@ 0x80
 800154a:	0189      	lsls	r1, r1, #6
 800154c:	430a      	orrs	r2, r1
 800154e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff fab4 	bl	8000abc <HAL_GetTick>
 8001554:	0003      	movs	r3, r0
 8001556:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800155a:	f7ff faaf 	bl	8000abc <HAL_GetTick>
 800155e:	0002      	movs	r2, r0
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e0ca      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800156c:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2202      	movs	r2, #2
 8001572:	4013      	ands	r3, r2
 8001574:	d0f1      	beq.n	800155a <HAL_RCC_OscConfig+0x5ea>
 8001576:	e01e      	b.n	80015b6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001578:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	4b1e      	ldr	r3, [pc, #120]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 800157e:	2101      	movs	r1, #1
 8001580:	438a      	bics	r2, r1
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	4b23      	ldr	r3, [pc, #140]	@ (8001614 <HAL_RCC_OscConfig+0x6a4>)
 8001586:	6a1a      	ldr	r2, [r3, #32]
 8001588:	4b22      	ldr	r3, [pc, #136]	@ (8001614 <HAL_RCC_OscConfig+0x6a4>)
 800158a:	4923      	ldr	r1, [pc, #140]	@ (8001618 <HAL_RCC_OscConfig+0x6a8>)
 800158c:	400a      	ands	r2, r1
 800158e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fa94 	bl	8000abc <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800159a:	f7ff fa8f 	bl	8000abc <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e0aa      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2202      	movs	r2, #2
 80015b2:	4013      	ands	r3, r2
 80015b4:	d1f1      	bne.n	800159a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d100      	bne.n	80015c0 <HAL_RCC_OscConfig+0x650>
 80015be:	e09f      	b.n	8001700 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	2b0c      	cmp	r3, #12
 80015c4:	d100      	bne.n	80015c8 <HAL_RCC_OscConfig+0x658>
 80015c6:	e078      	b.n	80016ba <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d159      	bne.n	8001684 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d0:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 80015d6:	4911      	ldr	r1, [pc, #68]	@ (800161c <HAL_RCC_OscConfig+0x6ac>)
 80015d8:	400a      	ands	r2, r1
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fa6e 	bl	8000abc <HAL_GetTick>
 80015e0:	0003      	movs	r3, r0
 80015e2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015e4:	e01c      	b.n	8001620 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff fa69 	bl	8000abc <HAL_GetTick>
 80015ea:	0002      	movs	r2, r0
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d915      	bls.n	8001620 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e084      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
 80015f8:	40021000 	.word	0x40021000
 80015fc:	ffff1fff 	.word	0xffff1fff
 8001600:	fffffeff 	.word	0xfffffeff
 8001604:	40007000 	.word	0x40007000
 8001608:	fffffbff 	.word	0xfffffbff
 800160c:	00001388 	.word	0x00001388
 8001610:	efffffff 	.word	0xefffffff
 8001614:	40010000 	.word	0x40010000
 8001618:	ffffdfff 	.word	0xffffdfff
 800161c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001620:	4b3a      	ldr	r3, [pc, #232]	@ (800170c <HAL_RCC_OscConfig+0x79c>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2380      	movs	r3, #128	@ 0x80
 8001626:	049b      	lsls	r3, r3, #18
 8001628:	4013      	ands	r3, r2
 800162a:	d1dc      	bne.n	80015e6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800162c:	4b37      	ldr	r3, [pc, #220]	@ (800170c <HAL_RCC_OscConfig+0x79c>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4a37      	ldr	r2, [pc, #220]	@ (8001710 <HAL_RCC_OscConfig+0x7a0>)
 8001632:	4013      	ands	r3, r2
 8001634:	0019      	movs	r1, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001644:	431a      	orrs	r2, r3
 8001646:	4b31      	ldr	r3, [pc, #196]	@ (800170c <HAL_RCC_OscConfig+0x79c>)
 8001648:	430a      	orrs	r2, r1
 800164a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800164c:	4b2f      	ldr	r3, [pc, #188]	@ (800170c <HAL_RCC_OscConfig+0x79c>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b2e      	ldr	r3, [pc, #184]	@ (800170c <HAL_RCC_OscConfig+0x79c>)
 8001652:	2180      	movs	r1, #128	@ 0x80
 8001654:	0449      	lsls	r1, r1, #17
 8001656:	430a      	orrs	r2, r1
 8001658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff fa2f 	bl	8000abc <HAL_GetTick>
 800165e:	0003      	movs	r3, r0
 8001660:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff fa2a 	bl	8000abc <HAL_GetTick>
 8001668:	0002      	movs	r2, r0
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e045      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001676:	4b25      	ldr	r3, [pc, #148]	@ (800170c <HAL_RCC_OscConfig+0x79c>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	2380      	movs	r3, #128	@ 0x80
 800167c:	049b      	lsls	r3, r3, #18
 800167e:	4013      	ands	r3, r2
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x6f4>
 8001682:	e03d      	b.n	8001700 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001684:	4b21      	ldr	r3, [pc, #132]	@ (800170c <HAL_RCC_OscConfig+0x79c>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b20      	ldr	r3, [pc, #128]	@ (800170c <HAL_RCC_OscConfig+0x79c>)
 800168a:	4922      	ldr	r1, [pc, #136]	@ (8001714 <HAL_RCC_OscConfig+0x7a4>)
 800168c:	400a      	ands	r2, r1
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fa14 	bl	8000abc <HAL_GetTick>
 8001694:	0003      	movs	r3, r0
 8001696:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169a:	f7ff fa0f 	bl	8000abc <HAL_GetTick>
 800169e:	0002      	movs	r2, r0
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e02a      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016ac:	4b17      	ldr	r3, [pc, #92]	@ (800170c <HAL_RCC_OscConfig+0x79c>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2380      	movs	r3, #128	@ 0x80
 80016b2:	049b      	lsls	r3, r3, #18
 80016b4:	4013      	ands	r3, r2
 80016b6:	d1f0      	bne.n	800169a <HAL_RCC_OscConfig+0x72a>
 80016b8:	e022      	b.n	8001700 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e01d      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016c6:	4b11      	ldr	r3, [pc, #68]	@ (800170c <HAL_RCC_OscConfig+0x79c>)
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	2380      	movs	r3, #128	@ 0x80
 80016d0:	025b      	lsls	r3, r3, #9
 80016d2:	401a      	ands	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d8:	429a      	cmp	r2, r3
 80016da:	d10f      	bne.n	80016fc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	23f0      	movs	r3, #240	@ 0xf0
 80016e0:	039b      	lsls	r3, r3, #14
 80016e2:	401a      	ands	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d107      	bne.n	80016fc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	23c0      	movs	r3, #192	@ 0xc0
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	401a      	ands	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	0018      	movs	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	b00a      	add	sp, #40	@ 0x28
 8001708:	bdb0      	pop	{r4, r5, r7, pc}
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	40021000 	.word	0x40021000
 8001710:	ff02ffff 	.word	0xff02ffff
 8001714:	feffffff 	.word	0xfeffffff

08001718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001718:	b5b0      	push	{r4, r5, r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e128      	b.n	800197e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800172c:	4b96      	ldr	r3, [pc, #600]	@ (8001988 <HAL_RCC_ClockConfig+0x270>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2201      	movs	r2, #1
 8001732:	4013      	ands	r3, r2
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d91e      	bls.n	8001778 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173a:	4b93      	ldr	r3, [pc, #588]	@ (8001988 <HAL_RCC_ClockConfig+0x270>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2201      	movs	r2, #1
 8001740:	4393      	bics	r3, r2
 8001742:	0019      	movs	r1, r3
 8001744:	4b90      	ldr	r3, [pc, #576]	@ (8001988 <HAL_RCC_ClockConfig+0x270>)
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800174c:	f7ff f9b6 	bl	8000abc <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001754:	e009      	b.n	800176a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001756:	f7ff f9b1 	bl	8000abc <HAL_GetTick>
 800175a:	0002      	movs	r2, r0
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	4a8a      	ldr	r2, [pc, #552]	@ (800198c <HAL_RCC_ClockConfig+0x274>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e109      	b.n	800197e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b87      	ldr	r3, [pc, #540]	@ (8001988 <HAL_RCC_ClockConfig+0x270>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2201      	movs	r2, #1
 8001770:	4013      	ands	r3, r2
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d1ee      	bne.n	8001756 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2202      	movs	r2, #2
 800177e:	4013      	ands	r3, r2
 8001780:	d009      	beq.n	8001796 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001782:	4b83      	ldr	r3, [pc, #524]	@ (8001990 <HAL_RCC_ClockConfig+0x278>)
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	22f0      	movs	r2, #240	@ 0xf0
 8001788:	4393      	bics	r3, r2
 800178a:	0019      	movs	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	4b7f      	ldr	r3, [pc, #508]	@ (8001990 <HAL_RCC_ClockConfig+0x278>)
 8001792:	430a      	orrs	r2, r1
 8001794:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2201      	movs	r2, #1
 800179c:	4013      	ands	r3, r2
 800179e:	d100      	bne.n	80017a2 <HAL_RCC_ClockConfig+0x8a>
 80017a0:	e089      	b.n	80018b6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d107      	bne.n	80017ba <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017aa:	4b79      	ldr	r3, [pc, #484]	@ (8001990 <HAL_RCC_ClockConfig+0x278>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	2380      	movs	r3, #128	@ 0x80
 80017b0:	029b      	lsls	r3, r3, #10
 80017b2:	4013      	ands	r3, r2
 80017b4:	d120      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e0e1      	b.n	800197e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017c2:	4b73      	ldr	r3, [pc, #460]	@ (8001990 <HAL_RCC_ClockConfig+0x278>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	2380      	movs	r3, #128	@ 0x80
 80017c8:	049b      	lsls	r3, r3, #18
 80017ca:	4013      	ands	r3, r2
 80017cc:	d114      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e0d5      	b.n	800197e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d106      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017da:	4b6d      	ldr	r3, [pc, #436]	@ (8001990 <HAL_RCC_ClockConfig+0x278>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2204      	movs	r2, #4
 80017e0:	4013      	ands	r3, r2
 80017e2:	d109      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0ca      	b.n	800197e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017e8:	4b69      	ldr	r3, [pc, #420]	@ (8001990 <HAL_RCC_ClockConfig+0x278>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2380      	movs	r3, #128	@ 0x80
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4013      	ands	r3, r2
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0c2      	b.n	800197e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f8:	4b65      	ldr	r3, [pc, #404]	@ (8001990 <HAL_RCC_ClockConfig+0x278>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2203      	movs	r2, #3
 80017fe:	4393      	bics	r3, r2
 8001800:	0019      	movs	r1, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	4b62      	ldr	r3, [pc, #392]	@ (8001990 <HAL_RCC_ClockConfig+0x278>)
 8001808:	430a      	orrs	r2, r1
 800180a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800180c:	f7ff f956 	bl	8000abc <HAL_GetTick>
 8001810:	0003      	movs	r3, r0
 8001812:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d111      	bne.n	8001840 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800181c:	e009      	b.n	8001832 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181e:	f7ff f94d 	bl	8000abc <HAL_GetTick>
 8001822:	0002      	movs	r2, r0
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	4a58      	ldr	r2, [pc, #352]	@ (800198c <HAL_RCC_ClockConfig+0x274>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e0a5      	b.n	800197e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001832:	4b57      	ldr	r3, [pc, #348]	@ (8001990 <HAL_RCC_ClockConfig+0x278>)
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	220c      	movs	r2, #12
 8001838:	4013      	ands	r3, r2
 800183a:	2b08      	cmp	r3, #8
 800183c:	d1ef      	bne.n	800181e <HAL_RCC_ClockConfig+0x106>
 800183e:	e03a      	b.n	80018b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b03      	cmp	r3, #3
 8001846:	d111      	bne.n	800186c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001848:	e009      	b.n	800185e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184a:	f7ff f937 	bl	8000abc <HAL_GetTick>
 800184e:	0002      	movs	r2, r0
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	4a4d      	ldr	r2, [pc, #308]	@ (800198c <HAL_RCC_ClockConfig+0x274>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e08f      	b.n	800197e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800185e:	4b4c      	ldr	r3, [pc, #304]	@ (8001990 <HAL_RCC_ClockConfig+0x278>)
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	220c      	movs	r2, #12
 8001864:	4013      	ands	r3, r2
 8001866:	2b0c      	cmp	r3, #12
 8001868:	d1ef      	bne.n	800184a <HAL_RCC_ClockConfig+0x132>
 800186a:	e024      	b.n	80018b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d11b      	bne.n	80018ac <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001874:	e009      	b.n	800188a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001876:	f7ff f921 	bl	8000abc <HAL_GetTick>
 800187a:	0002      	movs	r2, r0
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	4a42      	ldr	r2, [pc, #264]	@ (800198c <HAL_RCC_ClockConfig+0x274>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d901      	bls.n	800188a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e079      	b.n	800197e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800188a:	4b41      	ldr	r3, [pc, #260]	@ (8001990 <HAL_RCC_ClockConfig+0x278>)
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	220c      	movs	r2, #12
 8001890:	4013      	ands	r3, r2
 8001892:	2b04      	cmp	r3, #4
 8001894:	d1ef      	bne.n	8001876 <HAL_RCC_ClockConfig+0x15e>
 8001896:	e00e      	b.n	80018b6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001898:	f7ff f910 	bl	8000abc <HAL_GetTick>
 800189c:	0002      	movs	r2, r0
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	4a3a      	ldr	r2, [pc, #232]	@ (800198c <HAL_RCC_ClockConfig+0x274>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e068      	b.n	800197e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80018ac:	4b38      	ldr	r3, [pc, #224]	@ (8001990 <HAL_RCC_ClockConfig+0x278>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	220c      	movs	r2, #12
 80018b2:	4013      	ands	r3, r2
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b6:	4b34      	ldr	r3, [pc, #208]	@ (8001988 <HAL_RCC_ClockConfig+0x270>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2201      	movs	r2, #1
 80018bc:	4013      	ands	r3, r2
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d21e      	bcs.n	8001902 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c4:	4b30      	ldr	r3, [pc, #192]	@ (8001988 <HAL_RCC_ClockConfig+0x270>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2201      	movs	r2, #1
 80018ca:	4393      	bics	r3, r2
 80018cc:	0019      	movs	r1, r3
 80018ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001988 <HAL_RCC_ClockConfig+0x270>)
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018d6:	f7ff f8f1 	bl	8000abc <HAL_GetTick>
 80018da:	0003      	movs	r3, r0
 80018dc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	e009      	b.n	80018f4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e0:	f7ff f8ec 	bl	8000abc <HAL_GetTick>
 80018e4:	0002      	movs	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	4a28      	ldr	r2, [pc, #160]	@ (800198c <HAL_RCC_ClockConfig+0x274>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e044      	b.n	800197e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f4:	4b24      	ldr	r3, [pc, #144]	@ (8001988 <HAL_RCC_ClockConfig+0x270>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2201      	movs	r2, #1
 80018fa:	4013      	ands	r3, r2
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d1ee      	bne.n	80018e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2204      	movs	r2, #4
 8001908:	4013      	ands	r3, r2
 800190a:	d009      	beq.n	8001920 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800190c:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <HAL_RCC_ClockConfig+0x278>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4a20      	ldr	r2, [pc, #128]	@ (8001994 <HAL_RCC_ClockConfig+0x27c>)
 8001912:	4013      	ands	r3, r2
 8001914:	0019      	movs	r1, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	4b1d      	ldr	r3, [pc, #116]	@ (8001990 <HAL_RCC_ClockConfig+0x278>)
 800191c:	430a      	orrs	r2, r1
 800191e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2208      	movs	r2, #8
 8001926:	4013      	ands	r3, r2
 8001928:	d00a      	beq.n	8001940 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800192a:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <HAL_RCC_ClockConfig+0x278>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	4a1a      	ldr	r2, [pc, #104]	@ (8001998 <HAL_RCC_ClockConfig+0x280>)
 8001930:	4013      	ands	r3, r2
 8001932:	0019      	movs	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	00da      	lsls	r2, r3, #3
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <HAL_RCC_ClockConfig+0x278>)
 800193c:	430a      	orrs	r2, r1
 800193e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001940:	f000 f832 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 8001944:	0001      	movs	r1, r0
 8001946:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <HAL_RCC_ClockConfig+0x278>)
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	091b      	lsrs	r3, r3, #4
 800194c:	220f      	movs	r2, #15
 800194e:	4013      	ands	r3, r2
 8001950:	4a12      	ldr	r2, [pc, #72]	@ (800199c <HAL_RCC_ClockConfig+0x284>)
 8001952:	5cd3      	ldrb	r3, [r2, r3]
 8001954:	000a      	movs	r2, r1
 8001956:	40da      	lsrs	r2, r3
 8001958:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <HAL_RCC_ClockConfig+0x288>)
 800195a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <HAL_RCC_ClockConfig+0x28c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	250b      	movs	r5, #11
 8001962:	197c      	adds	r4, r7, r5
 8001964:	0018      	movs	r0, r3
 8001966:	f7ff f863 	bl	8000a30 <HAL_InitTick>
 800196a:	0003      	movs	r3, r0
 800196c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800196e:	197b      	adds	r3, r7, r5
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001976:	197b      	adds	r3, r7, r5
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	e000      	b.n	800197e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	0018      	movs	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	b004      	add	sp, #16
 8001984:	bdb0      	pop	{r4, r5, r7, pc}
 8001986:	46c0      	nop			@ (mov r8, r8)
 8001988:	40022000 	.word	0x40022000
 800198c:	00001388 	.word	0x00001388
 8001990:	40021000 	.word	0x40021000
 8001994:	fffff8ff 	.word	0xfffff8ff
 8001998:	ffffc7ff 	.word	0xffffc7ff
 800199c:	08002c80 	.word	0x08002c80
 80019a0:	20000008 	.word	0x20000008
 80019a4:	2000000c 	.word	0x2000000c

080019a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a8:	b5b0      	push	{r4, r5, r7, lr}
 80019aa:	b08e      	sub	sp, #56	@ 0x38
 80019ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80019ae:	4b4c      	ldr	r3, [pc, #304]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x138>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019b6:	230c      	movs	r3, #12
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b0c      	cmp	r3, #12
 80019bc:	d014      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0x40>
 80019be:	d900      	bls.n	80019c2 <HAL_RCC_GetSysClockFreq+0x1a>
 80019c0:	e07b      	b.n	8001aba <HAL_RCC_GetSysClockFreq+0x112>
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d002      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0x24>
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d00b      	beq.n	80019e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80019ca:	e076      	b.n	8001aba <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80019cc:	4b44      	ldr	r3, [pc, #272]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x138>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2210      	movs	r2, #16
 80019d2:	4013      	ands	r3, r2
 80019d4:	d002      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80019d6:	4b43      	ldr	r3, [pc, #268]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80019d8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80019da:	e07c      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80019dc:	4b42      	ldr	r3, [pc, #264]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x140>)
 80019de:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80019e0:	e079      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019e2:	4b42      	ldr	r3, [pc, #264]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x144>)
 80019e4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80019e6:	e076      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80019e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ea:	0c9a      	lsrs	r2, r3, #18
 80019ec:	230f      	movs	r3, #15
 80019ee:	401a      	ands	r2, r3
 80019f0:	4b3f      	ldr	r3, [pc, #252]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x148>)
 80019f2:	5c9b      	ldrb	r3, [r3, r2]
 80019f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80019f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019f8:	0d9a      	lsrs	r2, r3, #22
 80019fa:	2303      	movs	r3, #3
 80019fc:	4013      	ands	r3, r2
 80019fe:	3301      	adds	r3, #1
 8001a00:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a02:	4b37      	ldr	r3, [pc, #220]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	2380      	movs	r3, #128	@ 0x80
 8001a08:	025b      	lsls	r3, r3, #9
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d01a      	beq.n	8001a44 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a10:	61bb      	str	r3, [r7, #24]
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
 8001a16:	4a35      	ldr	r2, [pc, #212]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x144>)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	69b8      	ldr	r0, [r7, #24]
 8001a1c:	69f9      	ldr	r1, [r7, #28]
 8001a1e:	f7fe fc27 	bl	8000270 <__aeabi_lmul>
 8001a22:	0002      	movs	r2, r0
 8001a24:	000b      	movs	r3, r1
 8001a26:	0010      	movs	r0, r2
 8001a28:	0019      	movs	r1, r3
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f7fe fbfb 	bl	8000230 <__aeabi_uldivmod>
 8001a3a:	0002      	movs	r2, r0
 8001a3c:	000b      	movs	r3, r1
 8001a3e:	0013      	movs	r3, r2
 8001a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a42:	e037      	b.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a44:	4b26      	ldr	r3, [pc, #152]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2210      	movs	r2, #16
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d01a      	beq.n	8001a84 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4a23      	ldr	r2, [pc, #140]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	68b8      	ldr	r0, [r7, #8]
 8001a5c:	68f9      	ldr	r1, [r7, #12]
 8001a5e:	f7fe fc07 	bl	8000270 <__aeabi_lmul>
 8001a62:	0002      	movs	r2, r0
 8001a64:	000b      	movs	r3, r1
 8001a66:	0010      	movs	r0, r2
 8001a68:	0019      	movs	r1, r3
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6c:	603b      	str	r3, [r7, #0]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f7fe fbdb 	bl	8000230 <__aeabi_uldivmod>
 8001a7a:	0002      	movs	r2, r0
 8001a7c:	000b      	movs	r3, r1
 8001a7e:	0013      	movs	r3, r2
 8001a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a82:	e017      	b.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a86:	0018      	movs	r0, r3
 8001a88:	2300      	movs	r3, #0
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	4a16      	ldr	r2, [pc, #88]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x140>)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f7fe fbee 	bl	8000270 <__aeabi_lmul>
 8001a94:	0002      	movs	r2, r0
 8001a96:	000b      	movs	r3, r1
 8001a98:	0010      	movs	r0, r2
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9e:	001c      	movs	r4, r3
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	001d      	movs	r5, r3
 8001aa4:	0022      	movs	r2, r4
 8001aa6:	002b      	movs	r3, r5
 8001aa8:	f7fe fbc2 	bl	8000230 <__aeabi_uldivmod>
 8001aac:	0002      	movs	r2, r0
 8001aae:	000b      	movs	r3, r1
 8001ab0:	0013      	movs	r3, r2
 8001ab2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8001ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ab6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001ab8:	e00d      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001aba:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	0b5b      	lsrs	r3, r3, #13
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	2280      	movs	r2, #128	@ 0x80
 8001acc:	0212      	lsls	r2, r2, #8
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	0013      	movs	r3, r2
 8001ad2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001ad4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b00e      	add	sp, #56	@ 0x38
 8001ade:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	003d0900 	.word	0x003d0900
 8001ae8:	00f42400 	.word	0x00f42400
 8001aec:	007a1200 	.word	0x007a1200
 8001af0:	08002c98 	.word	0x08002c98

08001af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af8:	4b02      	ldr	r3, [pc, #8]	@ (8001b04 <HAL_RCC_GetHCLKFreq+0x10>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	46c0      	nop			@ (mov r8, r8)
 8001b04:	20000008 	.word	0x20000008

08001b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b0c:	f7ff fff2 	bl	8001af4 <HAL_RCC_GetHCLKFreq>
 8001b10:	0001      	movs	r1, r0
 8001b12:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	2207      	movs	r2, #7
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	4a04      	ldr	r2, [pc, #16]	@ (8001b30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	40d9      	lsrs	r1, r3
 8001b22:	000b      	movs	r3, r1
}
 8001b24:	0018      	movs	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	46c0      	nop			@ (mov r8, r8)
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	08002c90 	.word	0x08002c90

08001b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b38:	f7ff ffdc 	bl	8001af4 <HAL_RCC_GetHCLKFreq>
 8001b3c:	0001      	movs	r1, r0
 8001b3e:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	0adb      	lsrs	r3, r3, #11
 8001b44:	2207      	movs	r2, #7
 8001b46:	4013      	ands	r3, r2
 8001b48:	4a04      	ldr	r2, [pc, #16]	@ (8001b5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b4a:	5cd3      	ldrb	r3, [r2, r3]
 8001b4c:	40d9      	lsrs	r1, r3
 8001b4e:	000b      	movs	r3, r1
}
 8001b50:	0018      	movs	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			@ (mov r8, r8)
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	08002c90 	.word	0x08002c90

08001b60 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001b68:	2317      	movs	r3, #23
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2220      	movs	r2, #32
 8001b76:	4013      	ands	r3, r2
 8001b78:	d106      	bne.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	2380      	movs	r3, #128	@ 0x80
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	4013      	ands	r3, r2
 8001b84:	d100      	bne.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001b86:	e104      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b88:	4bb9      	ldr	r3, [pc, #740]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001b8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b8c:	2380      	movs	r3, #128	@ 0x80
 8001b8e:	055b      	lsls	r3, r3, #21
 8001b90:	4013      	ands	r3, r2
 8001b92:	d10a      	bne.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b94:	4bb6      	ldr	r3, [pc, #728]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001b96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b98:	4bb5      	ldr	r3, [pc, #724]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001b9a:	2180      	movs	r1, #128	@ 0x80
 8001b9c:	0549      	lsls	r1, r1, #21
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001ba2:	2317      	movs	r3, #23
 8001ba4:	18fb      	adds	r3, r7, r3
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001baa:	4bb2      	ldr	r3, [pc, #712]	@ (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	2380      	movs	r3, #128	@ 0x80
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d11a      	bne.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bb6:	4baf      	ldr	r3, [pc, #700]	@ (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4bae      	ldr	r3, [pc, #696]	@ (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001bbc:	2180      	movs	r1, #128	@ 0x80
 8001bbe:	0049      	lsls	r1, r1, #1
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc4:	f7fe ff7a 	bl	8000abc <HAL_GetTick>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bcc:	e008      	b.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bce:	f7fe ff75 	bl	8000abc <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b64      	cmp	r3, #100	@ 0x64
 8001bda:	d901      	bls.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e143      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be0:	4ba4      	ldr	r3, [pc, #656]	@ (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2380      	movs	r3, #128	@ 0x80
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4013      	ands	r3, r2
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001bec:	4ba0      	ldr	r3, [pc, #640]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	23c0      	movs	r3, #192	@ 0xc0
 8001bf2:	039b      	lsls	r3, r3, #14
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	23c0      	movs	r3, #192	@ 0xc0
 8001bfe:	039b      	lsls	r3, r3, #14
 8001c00:	4013      	ands	r3, r2
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d107      	bne.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	23c0      	movs	r3, #192	@ 0xc0
 8001c0e:	039b      	lsls	r3, r3, #14
 8001c10:	4013      	ands	r3, r2
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d013      	beq.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	23c0      	movs	r3, #192	@ 0xc0
 8001c1e:	029b      	lsls	r3, r3, #10
 8001c20:	401a      	ands	r2, r3
 8001c22:	23c0      	movs	r3, #192	@ 0xc0
 8001c24:	029b      	lsls	r3, r3, #10
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d10a      	bne.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001c2a:	4b91      	ldr	r3, [pc, #580]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	2380      	movs	r3, #128	@ 0x80
 8001c30:	029b      	lsls	r3, r3, #10
 8001c32:	401a      	ands	r2, r3
 8001c34:	2380      	movs	r3, #128	@ 0x80
 8001c36:	029b      	lsls	r3, r3, #10
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e113      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001c40:	4b8b      	ldr	r3, [pc, #556]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001c42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c44:	23c0      	movs	r3, #192	@ 0xc0
 8001c46:	029b      	lsls	r3, r3, #10
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d049      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	23c0      	movs	r3, #192	@ 0xc0
 8001c58:	029b      	lsls	r3, r3, #10
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d004      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2220      	movs	r2, #32
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d10d      	bne.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	23c0      	movs	r3, #192	@ 0xc0
 8001c72:	029b      	lsls	r3, r3, #10
 8001c74:	4013      	ands	r3, r2
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d034      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2380      	movs	r3, #128	@ 0x80
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	4013      	ands	r3, r2
 8001c86:	d02e      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001c88:	4b79      	ldr	r3, [pc, #484]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c8c:	4a7a      	ldr	r2, [pc, #488]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c92:	4b77      	ldr	r3, [pc, #476]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001c94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c96:	4b76      	ldr	r3, [pc, #472]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001c98:	2180      	movs	r1, #128	@ 0x80
 8001c9a:	0309      	lsls	r1, r1, #12
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ca0:	4b73      	ldr	r3, [pc, #460]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001ca2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ca4:	4b72      	ldr	r3, [pc, #456]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001ca6:	4975      	ldr	r1, [pc, #468]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8001ca8:	400a      	ands	r2, r1
 8001caa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001cac:	4b70      	ldr	r3, [pc, #448]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	2380      	movs	r3, #128	@ 0x80
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d014      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7fe fefe 	bl	8000abc <HAL_GetTick>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cc4:	e009      	b.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc6:	f7fe fef9 	bl	8000abc <HAL_GetTick>
 8001cca:	0002      	movs	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	4a6b      	ldr	r2, [pc, #428]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e0c6      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cda:	4b65      	ldr	r3, [pc, #404]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001cdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cde:	2380      	movs	r3, #128	@ 0x80
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d0ef      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	2380      	movs	r3, #128	@ 0x80
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d01f      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	23c0      	movs	r3, #192	@ 0xc0
 8001cf8:	029b      	lsls	r3, r3, #10
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	23c0      	movs	r3, #192	@ 0xc0
 8001cfe:	029b      	lsls	r3, r3, #10
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d10c      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001d04:	4b5a      	ldr	r3, [pc, #360]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a5e      	ldr	r2, [pc, #376]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	23c0      	movs	r3, #192	@ 0xc0
 8001d14:	039b      	lsls	r3, r3, #14
 8001d16:	401a      	ands	r2, r3
 8001d18:	4b55      	ldr	r3, [pc, #340]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	4b54      	ldr	r3, [pc, #336]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001d20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	23c0      	movs	r3, #192	@ 0xc0
 8001d28:	029b      	lsls	r3, r3, #10
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	4b50      	ldr	r3, [pc, #320]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2220      	movs	r2, #32
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d01f      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	23c0      	movs	r3, #192	@ 0xc0
 8001d42:	029b      	lsls	r3, r3, #10
 8001d44:	401a      	ands	r2, r3
 8001d46:	23c0      	movs	r3, #192	@ 0xc0
 8001d48:	029b      	lsls	r3, r3, #10
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001d4e:	4b48      	ldr	r3, [pc, #288]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a4c      	ldr	r2, [pc, #304]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	0019      	movs	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	23c0      	movs	r3, #192	@ 0xc0
 8001d5e:	039b      	lsls	r3, r3, #14
 8001d60:	401a      	ands	r2, r3
 8001d62:	4b43      	ldr	r3, [pc, #268]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	4b41      	ldr	r3, [pc, #260]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001d6a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	23c0      	movs	r3, #192	@ 0xc0
 8001d72:	029b      	lsls	r3, r3, #10
 8001d74:	401a      	ands	r2, r3
 8001d76:	4b3e      	ldr	r3, [pc, #248]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d7c:	2317      	movs	r3, #23
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d105      	bne.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d86:	4b3a      	ldr	r3, [pc, #232]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001d88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d8a:	4b39      	ldr	r3, [pc, #228]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001d8c:	493e      	ldr	r1, [pc, #248]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8001d8e:	400a      	ands	r2, r1
 8001d90:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2201      	movs	r2, #1
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d009      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d9c:	4b34      	ldr	r3, [pc, #208]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da0:	2203      	movs	r2, #3
 8001da2:	4393      	bics	r3, r2
 8001da4:	0019      	movs	r1, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	4b31      	ldr	r3, [pc, #196]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001dac:	430a      	orrs	r2, r1
 8001dae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2202      	movs	r2, #2
 8001db6:	4013      	ands	r3, r2
 8001db8:	d009      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dba:	4b2d      	ldr	r3, [pc, #180]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	4393      	bics	r3, r2
 8001dc2:	0019      	movs	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	4b29      	ldr	r3, [pc, #164]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d009      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001dd8:	4b25      	ldr	r3, [pc, #148]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001de8:	430a      	orrs	r2, r1
 8001dea:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2208      	movs	r2, #8
 8001df2:	4013      	ands	r3, r2
 8001df4:	d009      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001df6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfa:	4a25      	ldr	r2, [pc, #148]	@ (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	0019      	movs	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699a      	ldr	r2, [r3, #24]
 8001e04:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e06:	430a      	orrs	r2, r1
 8001e08:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	2380      	movs	r3, #128	@ 0x80
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4013      	ands	r3, r2
 8001e14:	d009      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e16:	4b16      	ldr	r3, [pc, #88]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1a:	4a17      	ldr	r2, [pc, #92]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	0019      	movs	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69da      	ldr	r2, [r3, #28]
 8001e24:	4b12      	ldr	r3, [pc, #72]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e26:	430a      	orrs	r2, r1
 8001e28:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2240      	movs	r2, #64	@ 0x40
 8001e30:	4013      	ands	r3, r2
 8001e32:	d009      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e34:	4b0e      	ldr	r3, [pc, #56]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e38:	4a16      	ldr	r2, [pc, #88]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	0019      	movs	r1, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e42:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e44:	430a      	orrs	r2, r1
 8001e46:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2280      	movs	r2, #128	@ 0x80
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d009      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001e52:	4b07      	ldr	r3, [pc, #28]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e56:	4a10      	ldr	r2, [pc, #64]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1a      	ldr	r2, [r3, #32]
 8001e60:	4b03      	ldr	r3, [pc, #12]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e62:	430a      	orrs	r2, r1
 8001e64:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b006      	add	sp, #24
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40007000 	.word	0x40007000
 8001e78:	fffcffff 	.word	0xfffcffff
 8001e7c:	fff7ffff 	.word	0xfff7ffff
 8001e80:	00001388 	.word	0x00001388
 8001e84:	ffcfffff 	.word	0xffcfffff
 8001e88:	efffffff 	.word	0xefffffff
 8001e8c:	fffff3ff 	.word	0xfffff3ff
 8001e90:	ffffcfff 	.word	0xffffcfff
 8001e94:	fbffffff 	.word	0xfbffffff
 8001e98:	fff3ffff 	.word	0xfff3ffff

08001e9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e044      	b.n	8001f38 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d107      	bne.n	8001ec6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2278      	movs	r2, #120	@ 0x78
 8001eba:	2100      	movs	r1, #0
 8001ebc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f7fe fcd7 	bl	8000874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2224      	movs	r2, #36	@ 0x24
 8001eca:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	438a      	bics	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f000 f9b6 	bl	8002250 <UART_SetConfig>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e024      	b.n	8001f38 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f000 fc47 	bl	800278c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	490d      	ldr	r1, [pc, #52]	@ (8001f40 <HAL_UART_Init+0xa4>)
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	212a      	movs	r1, #42	@ 0x2a
 8001f1a:	438a      	bics	r2, r1
 8001f1c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2101      	movs	r1, #1
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	0018      	movs	r0, r3
 8001f32:	f000 fcdf 	bl	80028f4 <UART_CheckIdleState>
 8001f36:	0003      	movs	r3, r0
}
 8001f38:	0018      	movs	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b002      	add	sp, #8
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	ffffb7ff 	.word	0xffffb7ff

08001f44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	@ 0x28
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	1dbb      	adds	r3, r7, #6
 8001f52:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d000      	beq.n	8001f5e <HAL_UART_Transmit+0x1a>
 8001f5c:	e08c      	b.n	8002078 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_UART_Transmit+0x28>
 8001f64:	1dbb      	adds	r3, r7, #6
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e084      	b.n	800207a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	2380      	movs	r3, #128	@ 0x80
 8001f76:	015b      	lsls	r3, r3, #5
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d109      	bne.n	8001f90 <HAL_UART_Transmit+0x4c>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d105      	bne.n	8001f90 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2201      	movs	r2, #1
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d001      	beq.n	8001f90 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e074      	b.n	800207a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2284      	movs	r2, #132	@ 0x84
 8001f94:	2100      	movs	r1, #0
 8001f96:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2221      	movs	r2, #33	@ 0x21
 8001f9c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f9e:	f7fe fd8d 	bl	8000abc <HAL_GetTick>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1dba      	adds	r2, r7, #6
 8001faa:	2150      	movs	r1, #80	@ 0x50
 8001fac:	8812      	ldrh	r2, [r2, #0]
 8001fae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1dba      	adds	r2, r7, #6
 8001fb4:	2152      	movs	r1, #82	@ 0x52
 8001fb6:	8812      	ldrh	r2, [r2, #0]
 8001fb8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	2380      	movs	r3, #128	@ 0x80
 8001fc0:	015b      	lsls	r3, r3, #5
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d108      	bne.n	8001fd8 <HAL_UART_Transmit+0x94>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d104      	bne.n	8001fd8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	e003      	b.n	8001fe0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fe0:	e02f      	b.n	8002042 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	0013      	movs	r3, r2
 8001fec:	2200      	movs	r2, #0
 8001fee:	2180      	movs	r1, #128	@ 0x80
 8001ff0:	f000 fd28 	bl	8002a44 <UART_WaitOnFlagUntilTimeout>
 8001ff4:	1e03      	subs	r3, r0, #0
 8001ff6:	d004      	beq.n	8002002 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e03b      	b.n	800207a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10b      	bne.n	8002020 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	001a      	movs	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	05d2      	lsls	r2, r2, #23
 8002014:	0dd2      	lsrs	r2, r2, #23
 8002016:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	3302      	adds	r3, #2
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	e007      	b.n	8002030 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	781a      	ldrb	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3301      	adds	r3, #1
 800202e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2252      	movs	r2, #82	@ 0x52
 8002034:	5a9b      	ldrh	r3, [r3, r2]
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b01      	subs	r3, #1
 800203a:	b299      	uxth	r1, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2252      	movs	r2, #82	@ 0x52
 8002040:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2252      	movs	r2, #82	@ 0x52
 8002046:	5a9b      	ldrh	r3, [r3, r2]
 8002048:	b29b      	uxth	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1c9      	bne.n	8001fe2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	0013      	movs	r3, r2
 8002058:	2200      	movs	r2, #0
 800205a:	2140      	movs	r1, #64	@ 0x40
 800205c:	f000 fcf2 	bl	8002a44 <UART_WaitOnFlagUntilTimeout>
 8002060:	1e03      	subs	r3, r0, #0
 8002062:	d004      	beq.n	800206e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e005      	b.n	800207a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2220      	movs	r2, #32
 8002072:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	e000      	b.n	800207a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002078:	2302      	movs	r3, #2
  }
}
 800207a:	0018      	movs	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	b008      	add	sp, #32
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	@ 0x28
 8002088:	af02      	add	r7, sp, #8
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	1dbb      	adds	r3, r7, #6
 8002092:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2280      	movs	r2, #128	@ 0x80
 8002098:	589b      	ldr	r3, [r3, r2]
 800209a:	2b20      	cmp	r3, #32
 800209c:	d000      	beq.n	80020a0 <HAL_UART_Receive+0x1c>
 800209e:	e0d0      	b.n	8002242 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_UART_Receive+0x2a>
 80020a6:	1dbb      	adds	r3, r7, #6
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0c8      	b.n	8002244 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	2380      	movs	r3, #128	@ 0x80
 80020b8:	015b      	lsls	r3, r3, #5
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d109      	bne.n	80020d2 <HAL_UART_Receive+0x4e>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d105      	bne.n	80020d2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2201      	movs	r2, #1
 80020ca:	4013      	ands	r3, r2
 80020cc:	d001      	beq.n	80020d2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e0b8      	b.n	8002244 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2284      	movs	r2, #132	@ 0x84
 80020d6:	2100      	movs	r1, #0
 80020d8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2280      	movs	r2, #128	@ 0x80
 80020de:	2122      	movs	r1, #34	@ 0x22
 80020e0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020e8:	f7fe fce8 	bl	8000abc <HAL_GetTick>
 80020ec:	0003      	movs	r3, r0
 80020ee:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1dba      	adds	r2, r7, #6
 80020f4:	2158      	movs	r1, #88	@ 0x58
 80020f6:	8812      	ldrh	r2, [r2, #0]
 80020f8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1dba      	adds	r2, r7, #6
 80020fe:	215a      	movs	r1, #90	@ 0x5a
 8002100:	8812      	ldrh	r2, [r2, #0]
 8002102:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	2380      	movs	r3, #128	@ 0x80
 800210a:	015b      	lsls	r3, r3, #5
 800210c:	429a      	cmp	r2, r3
 800210e:	d10d      	bne.n	800212c <HAL_UART_Receive+0xa8>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d104      	bne.n	8002122 <HAL_UART_Receive+0x9e>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	225c      	movs	r2, #92	@ 0x5c
 800211c:	494b      	ldr	r1, [pc, #300]	@ (800224c <HAL_UART_Receive+0x1c8>)
 800211e:	5299      	strh	r1, [r3, r2]
 8002120:	e02e      	b.n	8002180 <HAL_UART_Receive+0xfc>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	225c      	movs	r2, #92	@ 0x5c
 8002126:	21ff      	movs	r1, #255	@ 0xff
 8002128:	5299      	strh	r1, [r3, r2]
 800212a:	e029      	b.n	8002180 <HAL_UART_Receive+0xfc>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10d      	bne.n	8002150 <HAL_UART_Receive+0xcc>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d104      	bne.n	8002146 <HAL_UART_Receive+0xc2>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	225c      	movs	r2, #92	@ 0x5c
 8002140:	21ff      	movs	r1, #255	@ 0xff
 8002142:	5299      	strh	r1, [r3, r2]
 8002144:	e01c      	b.n	8002180 <HAL_UART_Receive+0xfc>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	225c      	movs	r2, #92	@ 0x5c
 800214a:	217f      	movs	r1, #127	@ 0x7f
 800214c:	5299      	strh	r1, [r3, r2]
 800214e:	e017      	b.n	8002180 <HAL_UART_Receive+0xfc>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	2380      	movs	r3, #128	@ 0x80
 8002156:	055b      	lsls	r3, r3, #21
 8002158:	429a      	cmp	r2, r3
 800215a:	d10d      	bne.n	8002178 <HAL_UART_Receive+0xf4>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d104      	bne.n	800216e <HAL_UART_Receive+0xea>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	225c      	movs	r2, #92	@ 0x5c
 8002168:	217f      	movs	r1, #127	@ 0x7f
 800216a:	5299      	strh	r1, [r3, r2]
 800216c:	e008      	b.n	8002180 <HAL_UART_Receive+0xfc>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	225c      	movs	r2, #92	@ 0x5c
 8002172:	213f      	movs	r1, #63	@ 0x3f
 8002174:	5299      	strh	r1, [r3, r2]
 8002176:	e003      	b.n	8002180 <HAL_UART_Receive+0xfc>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	225c      	movs	r2, #92	@ 0x5c
 800217c:	2100      	movs	r1, #0
 800217e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002180:	2312      	movs	r3, #18
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	215c      	movs	r1, #92	@ 0x5c
 8002188:	5a52      	ldrh	r2, [r2, r1]
 800218a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	2380      	movs	r3, #128	@ 0x80
 8002192:	015b      	lsls	r3, r3, #5
 8002194:	429a      	cmp	r2, r3
 8002196:	d108      	bne.n	80021aa <HAL_UART_Receive+0x126>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d104      	bne.n	80021aa <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	e003      	b.n	80021b2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80021b2:	e03a      	b.n	800222a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	0013      	movs	r3, r2
 80021be:	2200      	movs	r2, #0
 80021c0:	2120      	movs	r1, #32
 80021c2:	f000 fc3f 	bl	8002a44 <UART_WaitOnFlagUntilTimeout>
 80021c6:	1e03      	subs	r3, r0, #0
 80021c8:	d005      	beq.n	80021d6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2280      	movs	r2, #128	@ 0x80
 80021ce:	2120      	movs	r1, #32
 80021d0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e036      	b.n	8002244 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10e      	bne.n	80021fa <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2212      	movs	r2, #18
 80021e6:	18ba      	adds	r2, r7, r2
 80021e8:	8812      	ldrh	r2, [r2, #0]
 80021ea:	4013      	ands	r3, r2
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	3302      	adds	r3, #2
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	e00e      	b.n	8002218 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2212      	movs	r2, #18
 8002204:	18ba      	adds	r2, r7, r2
 8002206:	8812      	ldrh	r2, [r2, #0]
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	4013      	ands	r3, r2
 800220c:	b2da      	uxtb	r2, r3
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3301      	adds	r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	225a      	movs	r2, #90	@ 0x5a
 800221c:	5a9b      	ldrh	r3, [r3, r2]
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	b299      	uxth	r1, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	225a      	movs	r2, #90	@ 0x5a
 8002228:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	225a      	movs	r2, #90	@ 0x5a
 800222e:	5a9b      	ldrh	r3, [r3, r2]
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1be      	bne.n	80021b4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2280      	movs	r2, #128	@ 0x80
 800223a:	2120      	movs	r1, #32
 800223c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	e000      	b.n	8002244 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8002242:	2302      	movs	r3, #2
  }
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	b008      	add	sp, #32
 800224a:	bd80      	pop	{r7, pc}
 800224c:	000001ff 	.word	0x000001ff

08002250 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002250:	b5b0      	push	{r4, r5, r7, lr}
 8002252:	b08e      	sub	sp, #56	@ 0x38
 8002254:	af00      	add	r7, sp, #0
 8002256:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002258:	231a      	movs	r3, #26
 800225a:	2218      	movs	r2, #24
 800225c:	189b      	adds	r3, r3, r2
 800225e:	19db      	adds	r3, r3, r7
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	431a      	orrs	r2, r3
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	431a      	orrs	r2, r3
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	4313      	orrs	r3, r2
 800227a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4ac3      	ldr	r2, [pc, #780]	@ (8002590 <UART_SetConfig+0x340>)
 8002284:	4013      	ands	r3, r2
 8002286:	0019      	movs	r1, r3
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4abe      	ldr	r2, [pc, #760]	@ (8002594 <UART_SetConfig+0x344>)
 800229a:	4013      	ands	r3, r2
 800229c:	0019      	movs	r1, r3
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4ab8      	ldr	r2, [pc, #736]	@ (8002598 <UART_SetConfig+0x348>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d004      	beq.n	80022c4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022c0:	4313      	orrs	r3, r2
 80022c2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	4ab4      	ldr	r2, [pc, #720]	@ (800259c <UART_SetConfig+0x34c>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	0019      	movs	r1, r3
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022d6:	430a      	orrs	r2, r1
 80022d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4ab0      	ldr	r2, [pc, #704]	@ (80025a0 <UART_SetConfig+0x350>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d131      	bne.n	8002348 <UART_SetConfig+0xf8>
 80022e4:	4baf      	ldr	r3, [pc, #700]	@ (80025a4 <UART_SetConfig+0x354>)
 80022e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e8:	2203      	movs	r2, #3
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d01d      	beq.n	800232c <UART_SetConfig+0xdc>
 80022f0:	d823      	bhi.n	800233a <UART_SetConfig+0xea>
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d00c      	beq.n	8002310 <UART_SetConfig+0xc0>
 80022f6:	d820      	bhi.n	800233a <UART_SetConfig+0xea>
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <UART_SetConfig+0xb2>
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d00e      	beq.n	800231e <UART_SetConfig+0xce>
 8002300:	e01b      	b.n	800233a <UART_SetConfig+0xea>
 8002302:	231b      	movs	r3, #27
 8002304:	2218      	movs	r2, #24
 8002306:	189b      	adds	r3, r3, r2
 8002308:	19db      	adds	r3, r3, r7
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	e0b4      	b.n	800247a <UART_SetConfig+0x22a>
 8002310:	231b      	movs	r3, #27
 8002312:	2218      	movs	r2, #24
 8002314:	189b      	adds	r3, r3, r2
 8002316:	19db      	adds	r3, r3, r7
 8002318:	2202      	movs	r2, #2
 800231a:	701a      	strb	r2, [r3, #0]
 800231c:	e0ad      	b.n	800247a <UART_SetConfig+0x22a>
 800231e:	231b      	movs	r3, #27
 8002320:	2218      	movs	r2, #24
 8002322:	189b      	adds	r3, r3, r2
 8002324:	19db      	adds	r3, r3, r7
 8002326:	2204      	movs	r2, #4
 8002328:	701a      	strb	r2, [r3, #0]
 800232a:	e0a6      	b.n	800247a <UART_SetConfig+0x22a>
 800232c:	231b      	movs	r3, #27
 800232e:	2218      	movs	r2, #24
 8002330:	189b      	adds	r3, r3, r2
 8002332:	19db      	adds	r3, r3, r7
 8002334:	2208      	movs	r2, #8
 8002336:	701a      	strb	r2, [r3, #0]
 8002338:	e09f      	b.n	800247a <UART_SetConfig+0x22a>
 800233a:	231b      	movs	r3, #27
 800233c:	2218      	movs	r2, #24
 800233e:	189b      	adds	r3, r3, r2
 8002340:	19db      	adds	r3, r3, r7
 8002342:	2210      	movs	r2, #16
 8002344:	701a      	strb	r2, [r3, #0]
 8002346:	e098      	b.n	800247a <UART_SetConfig+0x22a>
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a96      	ldr	r2, [pc, #600]	@ (80025a8 <UART_SetConfig+0x358>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d131      	bne.n	80023b6 <UART_SetConfig+0x166>
 8002352:	4b94      	ldr	r3, [pc, #592]	@ (80025a4 <UART_SetConfig+0x354>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002356:	220c      	movs	r2, #12
 8002358:	4013      	ands	r3, r2
 800235a:	2b0c      	cmp	r3, #12
 800235c:	d01d      	beq.n	800239a <UART_SetConfig+0x14a>
 800235e:	d823      	bhi.n	80023a8 <UART_SetConfig+0x158>
 8002360:	2b08      	cmp	r3, #8
 8002362:	d00c      	beq.n	800237e <UART_SetConfig+0x12e>
 8002364:	d820      	bhi.n	80023a8 <UART_SetConfig+0x158>
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <UART_SetConfig+0x120>
 800236a:	2b04      	cmp	r3, #4
 800236c:	d00e      	beq.n	800238c <UART_SetConfig+0x13c>
 800236e:	e01b      	b.n	80023a8 <UART_SetConfig+0x158>
 8002370:	231b      	movs	r3, #27
 8002372:	2218      	movs	r2, #24
 8002374:	189b      	adds	r3, r3, r2
 8002376:	19db      	adds	r3, r3, r7
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
 800237c:	e07d      	b.n	800247a <UART_SetConfig+0x22a>
 800237e:	231b      	movs	r3, #27
 8002380:	2218      	movs	r2, #24
 8002382:	189b      	adds	r3, r3, r2
 8002384:	19db      	adds	r3, r3, r7
 8002386:	2202      	movs	r2, #2
 8002388:	701a      	strb	r2, [r3, #0]
 800238a:	e076      	b.n	800247a <UART_SetConfig+0x22a>
 800238c:	231b      	movs	r3, #27
 800238e:	2218      	movs	r2, #24
 8002390:	189b      	adds	r3, r3, r2
 8002392:	19db      	adds	r3, r3, r7
 8002394:	2204      	movs	r2, #4
 8002396:	701a      	strb	r2, [r3, #0]
 8002398:	e06f      	b.n	800247a <UART_SetConfig+0x22a>
 800239a:	231b      	movs	r3, #27
 800239c:	2218      	movs	r2, #24
 800239e:	189b      	adds	r3, r3, r2
 80023a0:	19db      	adds	r3, r3, r7
 80023a2:	2208      	movs	r2, #8
 80023a4:	701a      	strb	r2, [r3, #0]
 80023a6:	e068      	b.n	800247a <UART_SetConfig+0x22a>
 80023a8:	231b      	movs	r3, #27
 80023aa:	2218      	movs	r2, #24
 80023ac:	189b      	adds	r3, r3, r2
 80023ae:	19db      	adds	r3, r3, r7
 80023b0:	2210      	movs	r2, #16
 80023b2:	701a      	strb	r2, [r3, #0]
 80023b4:	e061      	b.n	800247a <UART_SetConfig+0x22a>
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a7c      	ldr	r2, [pc, #496]	@ (80025ac <UART_SetConfig+0x35c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d106      	bne.n	80023ce <UART_SetConfig+0x17e>
 80023c0:	231b      	movs	r3, #27
 80023c2:	2218      	movs	r2, #24
 80023c4:	189b      	adds	r3, r3, r2
 80023c6:	19db      	adds	r3, r3, r7
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
 80023cc:	e055      	b.n	800247a <UART_SetConfig+0x22a>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a77      	ldr	r2, [pc, #476]	@ (80025b0 <UART_SetConfig+0x360>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d106      	bne.n	80023e6 <UART_SetConfig+0x196>
 80023d8:	231b      	movs	r3, #27
 80023da:	2218      	movs	r2, #24
 80023dc:	189b      	adds	r3, r3, r2
 80023de:	19db      	adds	r3, r3, r7
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	e049      	b.n	800247a <UART_SetConfig+0x22a>
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a6b      	ldr	r2, [pc, #428]	@ (8002598 <UART_SetConfig+0x348>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d13e      	bne.n	800246e <UART_SetConfig+0x21e>
 80023f0:	4b6c      	ldr	r3, [pc, #432]	@ (80025a4 <UART_SetConfig+0x354>)
 80023f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80023f4:	23c0      	movs	r3, #192	@ 0xc0
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	4013      	ands	r3, r2
 80023fa:	22c0      	movs	r2, #192	@ 0xc0
 80023fc:	0112      	lsls	r2, r2, #4
 80023fe:	4293      	cmp	r3, r2
 8002400:	d027      	beq.n	8002452 <UART_SetConfig+0x202>
 8002402:	22c0      	movs	r2, #192	@ 0xc0
 8002404:	0112      	lsls	r2, r2, #4
 8002406:	4293      	cmp	r3, r2
 8002408:	d82a      	bhi.n	8002460 <UART_SetConfig+0x210>
 800240a:	2280      	movs	r2, #128	@ 0x80
 800240c:	0112      	lsls	r2, r2, #4
 800240e:	4293      	cmp	r3, r2
 8002410:	d011      	beq.n	8002436 <UART_SetConfig+0x1e6>
 8002412:	2280      	movs	r2, #128	@ 0x80
 8002414:	0112      	lsls	r2, r2, #4
 8002416:	4293      	cmp	r3, r2
 8002418:	d822      	bhi.n	8002460 <UART_SetConfig+0x210>
 800241a:	2b00      	cmp	r3, #0
 800241c:	d004      	beq.n	8002428 <UART_SetConfig+0x1d8>
 800241e:	2280      	movs	r2, #128	@ 0x80
 8002420:	00d2      	lsls	r2, r2, #3
 8002422:	4293      	cmp	r3, r2
 8002424:	d00e      	beq.n	8002444 <UART_SetConfig+0x1f4>
 8002426:	e01b      	b.n	8002460 <UART_SetConfig+0x210>
 8002428:	231b      	movs	r3, #27
 800242a:	2218      	movs	r2, #24
 800242c:	189b      	adds	r3, r3, r2
 800242e:	19db      	adds	r3, r3, r7
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
 8002434:	e021      	b.n	800247a <UART_SetConfig+0x22a>
 8002436:	231b      	movs	r3, #27
 8002438:	2218      	movs	r2, #24
 800243a:	189b      	adds	r3, r3, r2
 800243c:	19db      	adds	r3, r3, r7
 800243e:	2202      	movs	r2, #2
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	e01a      	b.n	800247a <UART_SetConfig+0x22a>
 8002444:	231b      	movs	r3, #27
 8002446:	2218      	movs	r2, #24
 8002448:	189b      	adds	r3, r3, r2
 800244a:	19db      	adds	r3, r3, r7
 800244c:	2204      	movs	r2, #4
 800244e:	701a      	strb	r2, [r3, #0]
 8002450:	e013      	b.n	800247a <UART_SetConfig+0x22a>
 8002452:	231b      	movs	r3, #27
 8002454:	2218      	movs	r2, #24
 8002456:	189b      	adds	r3, r3, r2
 8002458:	19db      	adds	r3, r3, r7
 800245a:	2208      	movs	r2, #8
 800245c:	701a      	strb	r2, [r3, #0]
 800245e:	e00c      	b.n	800247a <UART_SetConfig+0x22a>
 8002460:	231b      	movs	r3, #27
 8002462:	2218      	movs	r2, #24
 8002464:	189b      	adds	r3, r3, r2
 8002466:	19db      	adds	r3, r3, r7
 8002468:	2210      	movs	r2, #16
 800246a:	701a      	strb	r2, [r3, #0]
 800246c:	e005      	b.n	800247a <UART_SetConfig+0x22a>
 800246e:	231b      	movs	r3, #27
 8002470:	2218      	movs	r2, #24
 8002472:	189b      	adds	r3, r3, r2
 8002474:	19db      	adds	r3, r3, r7
 8002476:	2210      	movs	r2, #16
 8002478:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a46      	ldr	r2, [pc, #280]	@ (8002598 <UART_SetConfig+0x348>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d000      	beq.n	8002486 <UART_SetConfig+0x236>
 8002484:	e09a      	b.n	80025bc <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002486:	231b      	movs	r3, #27
 8002488:	2218      	movs	r2, #24
 800248a:	189b      	adds	r3, r3, r2
 800248c:	19db      	adds	r3, r3, r7
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b08      	cmp	r3, #8
 8002492:	d01d      	beq.n	80024d0 <UART_SetConfig+0x280>
 8002494:	dc20      	bgt.n	80024d8 <UART_SetConfig+0x288>
 8002496:	2b04      	cmp	r3, #4
 8002498:	d015      	beq.n	80024c6 <UART_SetConfig+0x276>
 800249a:	dc1d      	bgt.n	80024d8 <UART_SetConfig+0x288>
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <UART_SetConfig+0x256>
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d005      	beq.n	80024b0 <UART_SetConfig+0x260>
 80024a4:	e018      	b.n	80024d8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024a6:	f7ff fb2f 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 80024aa:	0003      	movs	r3, r0
 80024ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80024ae:	e01c      	b.n	80024ea <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024b0:	4b3c      	ldr	r3, [pc, #240]	@ (80025a4 <UART_SetConfig+0x354>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2210      	movs	r2, #16
 80024b6:	4013      	ands	r3, r2
 80024b8:	d002      	beq.n	80024c0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80024ba:	4b3e      	ldr	r3, [pc, #248]	@ (80025b4 <UART_SetConfig+0x364>)
 80024bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80024be:	e014      	b.n	80024ea <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80024c0:	4b3d      	ldr	r3, [pc, #244]	@ (80025b8 <UART_SetConfig+0x368>)
 80024c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80024c4:	e011      	b.n	80024ea <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024c6:	f7ff fa6f 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 80024ca:	0003      	movs	r3, r0
 80024cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80024ce:	e00c      	b.n	80024ea <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024d0:	2380      	movs	r3, #128	@ 0x80
 80024d2:	021b      	lsls	r3, r3, #8
 80024d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80024d6:	e008      	b.n	80024ea <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80024dc:	231a      	movs	r3, #26
 80024de:	2218      	movs	r2, #24
 80024e0:	189b      	adds	r3, r3, r2
 80024e2:	19db      	adds	r3, r3, r7
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
        break;
 80024e8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80024ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d100      	bne.n	80024f2 <UART_SetConfig+0x2a2>
 80024f0:	e133      	b.n	800275a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	0013      	movs	r3, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	189b      	adds	r3, r3, r2
 80024fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024fe:	429a      	cmp	r2, r3
 8002500:	d305      	bcc.n	800250e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800250a:	429a      	cmp	r2, r3
 800250c:	d906      	bls.n	800251c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800250e:	231a      	movs	r3, #26
 8002510:	2218      	movs	r2, #24
 8002512:	189b      	adds	r3, r3, r2
 8002514:	19db      	adds	r3, r3, r7
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	e11e      	b.n	800275a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800251c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	6939      	ldr	r1, [r7, #16]
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	000b      	movs	r3, r1
 800252a:	0e1b      	lsrs	r3, r3, #24
 800252c:	0010      	movs	r0, r2
 800252e:	0205      	lsls	r5, r0, #8
 8002530:	431d      	orrs	r5, r3
 8002532:	000b      	movs	r3, r1
 8002534:	021c      	lsls	r4, r3, #8
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	085b      	lsrs	r3, r3, #1
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	68b8      	ldr	r0, [r7, #8]
 8002544:	68f9      	ldr	r1, [r7, #12]
 8002546:	1900      	adds	r0, r0, r4
 8002548:	4169      	adcs	r1, r5
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	2300      	movs	r3, #0
 8002552:	607b      	str	r3, [r7, #4]
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f7fd fe6a 	bl	8000230 <__aeabi_uldivmod>
 800255c:	0002      	movs	r2, r0
 800255e:	000b      	movs	r3, r1
 8002560:	0013      	movs	r3, r2
 8002562:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002564:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002566:	23c0      	movs	r3, #192	@ 0xc0
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	429a      	cmp	r2, r3
 800256c:	d309      	bcc.n	8002582 <UART_SetConfig+0x332>
 800256e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002570:	2380      	movs	r3, #128	@ 0x80
 8002572:	035b      	lsls	r3, r3, #13
 8002574:	429a      	cmp	r2, r3
 8002576:	d204      	bcs.n	8002582 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800257e:	60da      	str	r2, [r3, #12]
 8002580:	e0eb      	b.n	800275a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8002582:	231a      	movs	r3, #26
 8002584:	2218      	movs	r2, #24
 8002586:	189b      	adds	r3, r3, r2
 8002588:	19db      	adds	r3, r3, r7
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]
 800258e:	e0e4      	b.n	800275a <UART_SetConfig+0x50a>
 8002590:	efff69f3 	.word	0xefff69f3
 8002594:	ffffcfff 	.word	0xffffcfff
 8002598:	40004800 	.word	0x40004800
 800259c:	fffff4ff 	.word	0xfffff4ff
 80025a0:	40013800 	.word	0x40013800
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40004400 	.word	0x40004400
 80025ac:	40004c00 	.word	0x40004c00
 80025b0:	40005000 	.word	0x40005000
 80025b4:	003d0900 	.word	0x003d0900
 80025b8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	2380      	movs	r3, #128	@ 0x80
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d000      	beq.n	80025ca <UART_SetConfig+0x37a>
 80025c8:	e070      	b.n	80026ac <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80025ca:	231b      	movs	r3, #27
 80025cc:	2218      	movs	r2, #24
 80025ce:	189b      	adds	r3, r3, r2
 80025d0:	19db      	adds	r3, r3, r7
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d822      	bhi.n	800261e <UART_SetConfig+0x3ce>
 80025d8:	009a      	lsls	r2, r3, #2
 80025da:	4b67      	ldr	r3, [pc, #412]	@ (8002778 <UART_SetConfig+0x528>)
 80025dc:	18d3      	adds	r3, r2, r3
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025e2:	f7ff fa91 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 80025e6:	0003      	movs	r3, r0
 80025e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80025ea:	e021      	b.n	8002630 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80025ec:	f7ff faa2 	bl	8001b34 <HAL_RCC_GetPCLK2Freq>
 80025f0:	0003      	movs	r3, r0
 80025f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80025f4:	e01c      	b.n	8002630 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025f6:	4b61      	ldr	r3, [pc, #388]	@ (800277c <UART_SetConfig+0x52c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2210      	movs	r2, #16
 80025fc:	4013      	ands	r3, r2
 80025fe:	d002      	beq.n	8002606 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002600:	4b5f      	ldr	r3, [pc, #380]	@ (8002780 <UART_SetConfig+0x530>)
 8002602:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002604:	e014      	b.n	8002630 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8002606:	4b5f      	ldr	r3, [pc, #380]	@ (8002784 <UART_SetConfig+0x534>)
 8002608:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800260a:	e011      	b.n	8002630 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800260c:	f7ff f9cc 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 8002610:	0003      	movs	r3, r0
 8002612:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002614:	e00c      	b.n	8002630 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002616:	2380      	movs	r3, #128	@ 0x80
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800261c:	e008      	b.n	8002630 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002622:	231a      	movs	r3, #26
 8002624:	2218      	movs	r2, #24
 8002626:	189b      	adds	r3, r3, r2
 8002628:	19db      	adds	r3, r3, r7
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]
        break;
 800262e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002632:	2b00      	cmp	r3, #0
 8002634:	d100      	bne.n	8002638 <UART_SetConfig+0x3e8>
 8002636:	e090      	b.n	800275a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800263a:	005a      	lsls	r2, r3, #1
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	085b      	lsrs	r3, r3, #1
 8002642:	18d2      	adds	r2, r2, r3
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	0019      	movs	r1, r3
 800264a:	0010      	movs	r0, r2
 800264c:	f7fd fd64 	bl	8000118 <__udivsi3>
 8002650:	0003      	movs	r3, r0
 8002652:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002656:	2b0f      	cmp	r3, #15
 8002658:	d921      	bls.n	800269e <UART_SetConfig+0x44e>
 800265a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800265c:	2380      	movs	r3, #128	@ 0x80
 800265e:	025b      	lsls	r3, r3, #9
 8002660:	429a      	cmp	r2, r3
 8002662:	d21c      	bcs.n	800269e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002666:	b29a      	uxth	r2, r3
 8002668:	200e      	movs	r0, #14
 800266a:	2418      	movs	r4, #24
 800266c:	1903      	adds	r3, r0, r4
 800266e:	19db      	adds	r3, r3, r7
 8002670:	210f      	movs	r1, #15
 8002672:	438a      	bics	r2, r1
 8002674:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002678:	085b      	lsrs	r3, r3, #1
 800267a:	b29b      	uxth	r3, r3
 800267c:	2207      	movs	r2, #7
 800267e:	4013      	ands	r3, r2
 8002680:	b299      	uxth	r1, r3
 8002682:	1903      	adds	r3, r0, r4
 8002684:	19db      	adds	r3, r3, r7
 8002686:	1902      	adds	r2, r0, r4
 8002688:	19d2      	adds	r2, r2, r7
 800268a:	8812      	ldrh	r2, [r2, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	1902      	adds	r2, r0, r4
 8002696:	19d2      	adds	r2, r2, r7
 8002698:	8812      	ldrh	r2, [r2, #0]
 800269a:	60da      	str	r2, [r3, #12]
 800269c:	e05d      	b.n	800275a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800269e:	231a      	movs	r3, #26
 80026a0:	2218      	movs	r2, #24
 80026a2:	189b      	adds	r3, r3, r2
 80026a4:	19db      	adds	r3, r3, r7
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	e056      	b.n	800275a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80026ac:	231b      	movs	r3, #27
 80026ae:	2218      	movs	r2, #24
 80026b0:	189b      	adds	r3, r3, r2
 80026b2:	19db      	adds	r3, r3, r7
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d822      	bhi.n	8002700 <UART_SetConfig+0x4b0>
 80026ba:	009a      	lsls	r2, r3, #2
 80026bc:	4b32      	ldr	r3, [pc, #200]	@ (8002788 <UART_SetConfig+0x538>)
 80026be:	18d3      	adds	r3, r2, r3
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026c4:	f7ff fa20 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 80026c8:	0003      	movs	r3, r0
 80026ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80026cc:	e021      	b.n	8002712 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026ce:	f7ff fa31 	bl	8001b34 <HAL_RCC_GetPCLK2Freq>
 80026d2:	0003      	movs	r3, r0
 80026d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80026d6:	e01c      	b.n	8002712 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026d8:	4b28      	ldr	r3, [pc, #160]	@ (800277c <UART_SetConfig+0x52c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2210      	movs	r2, #16
 80026de:	4013      	ands	r3, r2
 80026e0:	d002      	beq.n	80026e8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80026e2:	4b27      	ldr	r3, [pc, #156]	@ (8002780 <UART_SetConfig+0x530>)
 80026e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80026e6:	e014      	b.n	8002712 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80026e8:	4b26      	ldr	r3, [pc, #152]	@ (8002784 <UART_SetConfig+0x534>)
 80026ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80026ec:	e011      	b.n	8002712 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026ee:	f7ff f95b 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 80026f2:	0003      	movs	r3, r0
 80026f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80026f6:	e00c      	b.n	8002712 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026f8:	2380      	movs	r3, #128	@ 0x80
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80026fe:	e008      	b.n	8002712 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002704:	231a      	movs	r3, #26
 8002706:	2218      	movs	r2, #24
 8002708:	189b      	adds	r3, r3, r2
 800270a:	19db      	adds	r3, r3, r7
 800270c:	2201      	movs	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]
        break;
 8002710:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002714:	2b00      	cmp	r3, #0
 8002716:	d020      	beq.n	800275a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	085a      	lsrs	r2, r3, #1
 800271e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002720:	18d2      	adds	r2, r2, r3
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	0019      	movs	r1, r3
 8002728:	0010      	movs	r0, r2
 800272a:	f7fd fcf5 	bl	8000118 <__udivsi3>
 800272e:	0003      	movs	r3, r0
 8002730:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002734:	2b0f      	cmp	r3, #15
 8002736:	d90a      	bls.n	800274e <UART_SetConfig+0x4fe>
 8002738:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800273a:	2380      	movs	r3, #128	@ 0x80
 800273c:	025b      	lsls	r3, r3, #9
 800273e:	429a      	cmp	r2, r3
 8002740:	d205      	bcs.n	800274e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002744:	b29a      	uxth	r2, r3
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	60da      	str	r2, [r3, #12]
 800274c:	e005      	b.n	800275a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800274e:	231a      	movs	r3, #26
 8002750:	2218      	movs	r2, #24
 8002752:	189b      	adds	r3, r3, r2
 8002754:	19db      	adds	r3, r3, r7
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	2200      	movs	r2, #0
 800275e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	2200      	movs	r2, #0
 8002764:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002766:	231a      	movs	r3, #26
 8002768:	2218      	movs	r2, #24
 800276a:	189b      	adds	r3, r3, r2
 800276c:	19db      	adds	r3, r3, r7
 800276e:	781b      	ldrb	r3, [r3, #0]
}
 8002770:	0018      	movs	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	b00e      	add	sp, #56	@ 0x38
 8002776:	bdb0      	pop	{r4, r5, r7, pc}
 8002778:	08002ca4 	.word	0x08002ca4
 800277c:	40021000 	.word	0x40021000
 8002780:	003d0900 	.word	0x003d0900
 8002784:	00f42400 	.word	0x00f42400
 8002788:	08002cc8 	.word	0x08002cc8

0800278c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	2201      	movs	r2, #1
 800279a:	4013      	ands	r3, r2
 800279c:	d00b      	beq.n	80027b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4a4a      	ldr	r2, [pc, #296]	@ (80028d0 <UART_AdvFeatureConfig+0x144>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	2202      	movs	r2, #2
 80027bc:	4013      	ands	r3, r2
 80027be:	d00b      	beq.n	80027d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4a43      	ldr	r2, [pc, #268]	@ (80028d4 <UART_AdvFeatureConfig+0x148>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	0019      	movs	r1, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027dc:	2204      	movs	r2, #4
 80027de:	4013      	ands	r3, r2
 80027e0:	d00b      	beq.n	80027fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a3b      	ldr	r2, [pc, #236]	@ (80028d8 <UART_AdvFeatureConfig+0x14c>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	0019      	movs	r1, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fe:	2208      	movs	r2, #8
 8002800:	4013      	ands	r3, r2
 8002802:	d00b      	beq.n	800281c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4a34      	ldr	r2, [pc, #208]	@ (80028dc <UART_AdvFeatureConfig+0x150>)
 800280c:	4013      	ands	r3, r2
 800280e:	0019      	movs	r1, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002820:	2210      	movs	r2, #16
 8002822:	4013      	ands	r3, r2
 8002824:	d00b      	beq.n	800283e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a2c      	ldr	r2, [pc, #176]	@ (80028e0 <UART_AdvFeatureConfig+0x154>)
 800282e:	4013      	ands	r3, r2
 8002830:	0019      	movs	r1, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	2220      	movs	r2, #32
 8002844:	4013      	ands	r3, r2
 8002846:	d00b      	beq.n	8002860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	4a25      	ldr	r2, [pc, #148]	@ (80028e4 <UART_AdvFeatureConfig+0x158>)
 8002850:	4013      	ands	r3, r2
 8002852:	0019      	movs	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	2240      	movs	r2, #64	@ 0x40
 8002866:	4013      	ands	r3, r2
 8002868:	d01d      	beq.n	80028a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a1d      	ldr	r2, [pc, #116]	@ (80028e8 <UART_AdvFeatureConfig+0x15c>)
 8002872:	4013      	ands	r3, r2
 8002874:	0019      	movs	r1, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002886:	2380      	movs	r3, #128	@ 0x80
 8002888:	035b      	lsls	r3, r3, #13
 800288a:	429a      	cmp	r2, r3
 800288c:	d10b      	bne.n	80028a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	4a15      	ldr	r2, [pc, #84]	@ (80028ec <UART_AdvFeatureConfig+0x160>)
 8002896:	4013      	ands	r3, r2
 8002898:	0019      	movs	r1, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028aa:	2280      	movs	r2, #128	@ 0x80
 80028ac:	4013      	ands	r3, r2
 80028ae:	d00b      	beq.n	80028c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4a0e      	ldr	r2, [pc, #56]	@ (80028f0 <UART_AdvFeatureConfig+0x164>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	0019      	movs	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	605a      	str	r2, [r3, #4]
  }
}
 80028c8:	46c0      	nop			@ (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	fffdffff 	.word	0xfffdffff
 80028d4:	fffeffff 	.word	0xfffeffff
 80028d8:	fffbffff 	.word	0xfffbffff
 80028dc:	ffff7fff 	.word	0xffff7fff
 80028e0:	ffffefff 	.word	0xffffefff
 80028e4:	ffffdfff 	.word	0xffffdfff
 80028e8:	ffefffff 	.word	0xffefffff
 80028ec:	ff9fffff 	.word	0xff9fffff
 80028f0:	fff7ffff 	.word	0xfff7ffff

080028f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b092      	sub	sp, #72	@ 0x48
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2284      	movs	r2, #132	@ 0x84
 8002900:	2100      	movs	r1, #0
 8002902:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002904:	f7fe f8da 	bl	8000abc <HAL_GetTick>
 8002908:	0003      	movs	r3, r0
 800290a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2208      	movs	r2, #8
 8002914:	4013      	ands	r3, r2
 8002916:	2b08      	cmp	r3, #8
 8002918:	d12c      	bne.n	8002974 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800291a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800291c:	2280      	movs	r2, #128	@ 0x80
 800291e:	0391      	lsls	r1, r2, #14
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	4a46      	ldr	r2, [pc, #280]	@ (8002a3c <UART_CheckIdleState+0x148>)
 8002924:	9200      	str	r2, [sp, #0]
 8002926:	2200      	movs	r2, #0
 8002928:	f000 f88c 	bl	8002a44 <UART_WaitOnFlagUntilTimeout>
 800292c:	1e03      	subs	r3, r0, #0
 800292e:	d021      	beq.n	8002974 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002930:	f3ef 8310 	mrs	r3, PRIMASK
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002938:	63bb      	str	r3, [r7, #56]	@ 0x38
 800293a:	2301      	movs	r3, #1
 800293c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002940:	f383 8810 	msr	PRIMASK, r3
}
 8002944:	46c0      	nop			@ (mov r8, r8)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2180      	movs	r1, #128	@ 0x80
 8002952:	438a      	bics	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800295a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800295c:	f383 8810 	msr	PRIMASK, r3
}
 8002960:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2278      	movs	r2, #120	@ 0x78
 800296c:	2100      	movs	r1, #0
 800296e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e05f      	b.n	8002a34 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2204      	movs	r2, #4
 800297c:	4013      	ands	r3, r2
 800297e:	2b04      	cmp	r3, #4
 8002980:	d146      	bne.n	8002a10 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002984:	2280      	movs	r2, #128	@ 0x80
 8002986:	03d1      	lsls	r1, r2, #15
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4a2c      	ldr	r2, [pc, #176]	@ (8002a3c <UART_CheckIdleState+0x148>)
 800298c:	9200      	str	r2, [sp, #0]
 800298e:	2200      	movs	r2, #0
 8002990:	f000 f858 	bl	8002a44 <UART_WaitOnFlagUntilTimeout>
 8002994:	1e03      	subs	r3, r0, #0
 8002996:	d03b      	beq.n	8002a10 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002998:	f3ef 8310 	mrs	r3, PRIMASK
 800299c:	60fb      	str	r3, [r7, #12]
  return(result);
 800299e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80029a2:	2301      	movs	r3, #1
 80029a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f383 8810 	msr	PRIMASK, r3
}
 80029ac:	46c0      	nop			@ (mov r8, r8)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4921      	ldr	r1, [pc, #132]	@ (8002a40 <UART_CheckIdleState+0x14c>)
 80029ba:	400a      	ands	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f383 8810 	msr	PRIMASK, r3
}
 80029c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ca:	f3ef 8310 	mrs	r3, PRIMASK
 80029ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80029d0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80029d4:	2301      	movs	r3, #1
 80029d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f383 8810 	msr	PRIMASK, r3
}
 80029de:	46c0      	nop			@ (mov r8, r8)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2101      	movs	r1, #1
 80029ec:	438a      	bics	r2, r1
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	f383 8810 	msr	PRIMASK, r3
}
 80029fa:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2280      	movs	r2, #128	@ 0x80
 8002a00:	2120      	movs	r1, #32
 8002a02:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2278      	movs	r2, #120	@ 0x78
 8002a08:	2100      	movs	r1, #0
 8002a0a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e011      	b.n	8002a34 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2280      	movs	r2, #128	@ 0x80
 8002a1a:	2120      	movs	r1, #32
 8002a1c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2278      	movs	r2, #120	@ 0x78
 8002a2e:	2100      	movs	r1, #0
 8002a30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	0018      	movs	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b010      	add	sp, #64	@ 0x40
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	01ffffff 	.word	0x01ffffff
 8002a40:	fffffedf 	.word	0xfffffedf

08002a44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	603b      	str	r3, [r7, #0]
 8002a50:	1dfb      	adds	r3, r7, #7
 8002a52:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a54:	e04b      	b.n	8002aee <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	d048      	beq.n	8002aee <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a5c:	f7fe f82e 	bl	8000abc <HAL_GetTick>
 8002a60:	0002      	movs	r2, r0
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d302      	bcc.n	8002a72 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e04b      	b.n	8002b0e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d035      	beq.n	8002aee <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	2208      	movs	r2, #8
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d111      	bne.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2208      	movs	r2, #8
 8002a96:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f000 f83c 	bl	8002b18 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2284      	movs	r2, #132	@ 0x84
 8002aa4:	2108      	movs	r1, #8
 8002aa6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2278      	movs	r2, #120	@ 0x78
 8002aac:	2100      	movs	r1, #0
 8002aae:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e02c      	b.n	8002b0e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69da      	ldr	r2, [r3, #28]
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	401a      	ands	r2, r3
 8002ac0:	2380      	movs	r3, #128	@ 0x80
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d112      	bne.n	8002aee <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2280      	movs	r2, #128	@ 0x80
 8002ace:	0112      	lsls	r2, r2, #4
 8002ad0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f000 f81f 	bl	8002b18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2284      	movs	r2, #132	@ 0x84
 8002ade:	2120      	movs	r1, #32
 8002ae0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2278      	movs	r2, #120	@ 0x78
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e00f      	b.n	8002b0e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	4013      	ands	r3, r2
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	425a      	negs	r2, r3
 8002afe:	4153      	adcs	r3, r2
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	001a      	movs	r2, r3
 8002b04:	1dfb      	adds	r3, r7, #7
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d0a4      	beq.n	8002a56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	0018      	movs	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b004      	add	sp, #16
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08e      	sub	sp, #56	@ 0x38
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b20:	f3ef 8310 	mrs	r3, PRIMASK
 8002b24:	617b      	str	r3, [r7, #20]
  return(result);
 8002b26:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	f383 8810 	msr	PRIMASK, r3
}
 8002b34:	46c0      	nop			@ (mov r8, r8)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4926      	ldr	r1, [pc, #152]	@ (8002bdc <UART_EndRxTransfer+0xc4>)
 8002b42:	400a      	ands	r2, r1
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f383 8810 	msr	PRIMASK, r3
}
 8002b50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b52:	f3ef 8310 	mrs	r3, PRIMASK
 8002b56:	623b      	str	r3, [r7, #32]
  return(result);
 8002b58:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b62:	f383 8810 	msr	PRIMASK, r3
}
 8002b66:	46c0      	nop			@ (mov r8, r8)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2101      	movs	r1, #1
 8002b74:	438a      	bics	r2, r1
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b7e:	f383 8810 	msr	PRIMASK, r3
}
 8002b82:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d118      	bne.n	8002bbe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b90:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b92:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b96:	2301      	movs	r3, #1
 8002b98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ba0:	46c0      	nop			@ (mov r8, r8)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2110      	movs	r1, #16
 8002bae:	438a      	bics	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f383 8810 	msr	PRIMASK, r3
}
 8002bbc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2280      	movs	r2, #128	@ 0x80
 8002bc2:	2120      	movs	r1, #32
 8002bc4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002bd2:	46c0      	nop			@ (mov r8, r8)
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b00e      	add	sp, #56	@ 0x38
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	46c0      	nop			@ (mov r8, r8)
 8002bdc:	fffffedf 	.word	0xfffffedf

08002be0 <memset>:
 8002be0:	0003      	movs	r3, r0
 8002be2:	1882      	adds	r2, r0, r2
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d100      	bne.n	8002bea <memset+0xa>
 8002be8:	4770      	bx	lr
 8002bea:	7019      	strb	r1, [r3, #0]
 8002bec:	3301      	adds	r3, #1
 8002bee:	e7f9      	b.n	8002be4 <memset+0x4>

08002bf0 <__libc_init_array>:
 8002bf0:	b570      	push	{r4, r5, r6, lr}
 8002bf2:	2600      	movs	r6, #0
 8002bf4:	4c0c      	ldr	r4, [pc, #48]	@ (8002c28 <__libc_init_array+0x38>)
 8002bf6:	4d0d      	ldr	r5, [pc, #52]	@ (8002c2c <__libc_init_array+0x3c>)
 8002bf8:	1b64      	subs	r4, r4, r5
 8002bfa:	10a4      	asrs	r4, r4, #2
 8002bfc:	42a6      	cmp	r6, r4
 8002bfe:	d109      	bne.n	8002c14 <__libc_init_array+0x24>
 8002c00:	2600      	movs	r6, #0
 8002c02:	f000 f819 	bl	8002c38 <_init>
 8002c06:	4c0a      	ldr	r4, [pc, #40]	@ (8002c30 <__libc_init_array+0x40>)
 8002c08:	4d0a      	ldr	r5, [pc, #40]	@ (8002c34 <__libc_init_array+0x44>)
 8002c0a:	1b64      	subs	r4, r4, r5
 8002c0c:	10a4      	asrs	r4, r4, #2
 8002c0e:	42a6      	cmp	r6, r4
 8002c10:	d105      	bne.n	8002c1e <__libc_init_array+0x2e>
 8002c12:	bd70      	pop	{r4, r5, r6, pc}
 8002c14:	00b3      	lsls	r3, r6, #2
 8002c16:	58eb      	ldr	r3, [r5, r3]
 8002c18:	4798      	blx	r3
 8002c1a:	3601      	adds	r6, #1
 8002c1c:	e7ee      	b.n	8002bfc <__libc_init_array+0xc>
 8002c1e:	00b3      	lsls	r3, r6, #2
 8002c20:	58eb      	ldr	r3, [r5, r3]
 8002c22:	4798      	blx	r3
 8002c24:	3601      	adds	r6, #1
 8002c26:	e7f2      	b.n	8002c0e <__libc_init_array+0x1e>
 8002c28:	08002cf4 	.word	0x08002cf4
 8002c2c:	08002cf4 	.word	0x08002cf4
 8002c30:	08002cf8 	.word	0x08002cf8
 8002c34:	08002cf4 	.word	0x08002cf4

08002c38 <_init>:
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	46c0      	nop			@ (mov r8, r8)
 8002c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3e:	bc08      	pop	{r3}
 8002c40:	469e      	mov	lr, r3
 8002c42:	4770      	bx	lr

08002c44 <_fini>:
 8002c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c46:	46c0      	nop			@ (mov r8, r8)
 8002c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4a:	bc08      	pop	{r3}
 8002c4c:	469e      	mov	lr, r3
 8002c4e:	4770      	bx	lr
